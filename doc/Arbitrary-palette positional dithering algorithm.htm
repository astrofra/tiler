<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><script src="Arbitrary-palette%20positional%20dithering%20algorithm_files/analytics.js" type="text/javascript"></script>
<script type="text/javascript">window.addEventListener('DOMContentLoaded',function(){var v=archive_analytics.values;v.service='wb';v.server_name='wwwb-app13.us.archive.org';v.server_ms=162;archive_analytics.send_pageview({});});</script>
<script type="text/javascript" src="Arbitrary-palette%20positional%20dithering%20algorithm_files/ait-client-rewrite.js" charset="utf-8"></script>
<script type="text/javascript">
WB_wombat_Init('http://web.archive.org/web', '20171024201240', 'bisqwit.iki.fi');
</script>
<script type="text/javascript" src="Arbitrary-palette%20positional%20dithering%20algorithm_files/wbhack.js" charset="utf-8"></script>
<script type="text/javascript">
__wbhack.init('http://web.archive.org/web');
</script>
<link rel="stylesheet" type="text/css" href="Arbitrary-palette%20positional%20dithering%20algorithm_files/banner-styles.css">
<link rel="stylesheet" type="text/css" href="Arbitrary-palette%20positional%20dithering%20algorithm_files/iconochive.css">
<!-- End Wayback Rewrite JS Include -->

  <title>Arbitrary-palette positional dithering algorithm</title>
  <link rel="stylesheet" type="text/css" href="Arbitrary-palette%20positional%20dithering%20algorithm_files/a.txt" title="normal">
  <script type="text/javascript" src="Arbitrary-palette%20positional%20dithering%20algorithm_files/mktree.js"></script>
<style type="text/css"><!--
@media screen{.source_snippet{max-height:15em} }.source_snippet{font-size:87%}@media screen{body{padding:2em 4%;margin:16px 4%} }
--></style> </head>
 <body><div id="wm-ipp" style="display: block; direction: ltr;" class="" lang="en">
<div style="position:fixed;left:0;top:0;right:0;">
<div id="wm-ipp-inside">
  <div style="position:relative;">
    <div id="wm-logo" style="float:left;width:130px;padding-top:10px;">
      <a href="http://web.archive.org/web/" title="Wayback Machine home page"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"></a>
    </div>
    <div class="r" style="float:right;">
      <div id="wm-btns" style="text-align:right;height:25px;">
                  <div id="wm-save-snapshot-success">success</div>
          <div id="wm-save-snapshot-fail">fail</div>
          <a href="#" onclick="__wm.saveSnapshot('http://bisqwit.iki.fi/story/howto/dither/jy/', '20171024201240')" title="Share via My Web Archive" id="wm-save-snapshot-open" style="display: none;">
            <span class="iconochive-web"></span>
          </a>
          <a href="https://archive.org/account/login.php" title="Sign In" id="wm-sign-in" style="display: inline-block;">
            <span class="iconochive-person"></span>
          </a>
          <span id="wm-save-snapshot-in-progress" class="iconochive-web" style="display: none;"></span>
        	<a href="http://faq.web.archive.org/" title="Get some help using the Wayback Machine" style="top:-6px;"><span class="iconochive-question" style="color:rgb(87,186,244);font-size:160%;"></span></a>
	<a id="wm-tb-close" href="#close" onclick="__wm.h(event);return false;" style="top:-2px;" title="Close the toolbar"><span class="iconochive-remove-circle" style="color:#888888;font-size:240%;"></span></a>
      </div>
      <div id="wm-share" style="text-align:right;">
	<a href="#" onclick="window.open('https://www.facebook.com/sharer/sharer.php?u=http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/story/howto/dither/jy/', '', 'height=400,width=600'); return false;" title="Share on Facebook" style="margin-right:5px;" target="_blank"><span class="iconochive-facebook" style="color:#3b5998;font-size:160%;"></span></a>
	<a href="#" onclick="window.open('https://twitter.com/intent/tweet?text=http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/story/howto/dither/jy/&amp;via=internetarchive', '', 'height=400,width=600'); return false;" title="Share on Twitter" style="margin-right:5px;" target="_blank"><span class="iconochive-twitter" style="color:#1dcaff;font-size:160%;"></span></a>
      </div>
    </div>
    <table class="c" style="">
      <tbody>
	<tr>
	  <td class="u" colspan="2">
	    <form target="_top" method="get" action="/web/submit" name="wmtb" id="wmtb"><input type="text" name="url" id="wmtbURL" value="http://bisqwit.iki.fi/story/howto/dither/jy/" onfocus="this.focus();this.select();" autocomplete="off"><input type="hidden" name="type" value="replay"><input type="hidden" name="date" value="20171024201240"><input type="submit" value="Go"></form>
	  </td>
	  <td class="n" rowspan="2" style="width:110px;">
	    <table>
	      <tbody>
		<!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
		<tr class="m">
		  <td class="b" nowrap="nowrap"><a href="http://web.archive.org/web/20170924052529/http://bisqwit.iki.fi:80/story/howto/dither/jy" title="24 Sep 2017"><strong>Sep</strong></a></td>
		  <td class="c" id="displayMonthEl" title="You are here: 20:12:40 Oct 24, 2017">Oct</td>
		  <td class="f" nowrap="nowrap"><a href="http://web.archive.org/web/20171210184034/http://bisqwit.iki.fi:80/story/howto/dither/jy" title="10 Dec 2017"><strong>Dec</strong></a></td>
		</tr>
		<!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
		<tr class="d">
		  <td class="b" nowrap="nowrap"><a href="http://web.archive.org/web/20171006114340/http://bisqwit.iki.fi/story/howto/dither/jy/" title="11:43:40 Oct 06, 2017"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0"></a></td>
		  <td class="c" id="displayDayEl" style="width:34px;font-size:24px;white-space:nowrap;" title="You are here: 20:12:40 Oct 24, 2017">24</td>
		  <td class="f" nowrap="nowrap"><a href="http://web.archive.org/web/20171106103138/http://bisqwit.iki.fi:80/story/howto/dither/jy" title="10:31:38 Nov 06, 2017"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/wm_tb_nxt_on.png" alt="Next capture" width="14" height="16" border="0"></a></td>
		</tr>
		<!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
		<tr class="y">
		  <td class="b" nowrap="nowrap"><a href="http://web.archive.org/web/20161018100537/http://bisqwit.iki.fi/story/howto/dither/jy/" title="18 Oct 2016"><strong>2016</strong></a></td>
		  <td class="c" id="displayYearEl" title="You are here: 20:12:40 Oct 24, 2017">2017</td>
		  <td class="f" nowrap="nowrap">2018</td>
		</tr>
	      </tbody>
	    </table>
	  </td>
	</tr>
	<tr>
	  <td class="s">
	    	    <div id="wm-nav-captures"><a class="t" href="http://web.archive.org/web/*/http://bisqwit.iki.fi/story/howto/dither/jy/" title="See a list of every capture for this URL">83 captures</a><div class="r" title="Timespan for captures of this URL">25 Mar 2011 - 19 Aug 2018</div></div>
	  </td>
	  <td class="k">
	    <a href="http://web.archive.org/web/20000101000000/http://bisqwit.iki.fi/story/howto/dither/jy/" id="wm-graph-anchor">
	      <div id="wm-ipp-sparkline" title="Explore captures for this URL" style="position: relative">
		<canvas id="wm-sparkline-canvas" width="575" height="27" border="0"></canvas>
	      <div class="yt" style="display: none; width: 25px; height: 27px; left: 100px;"></div><div class="mt" style="display: none; width: 2px; height: 27px; left: 101px;"></div></div>
	    </a>
	  </td>
	</tr>
      </tbody>
    </table>
    <div style="position:absolute;bottom:0;right:2px;text-align:right;">
      <a id="wm-expand" class="wm-btn wm-closed" href="#expand" onclick="__wm.ex(event);return false;"><span id="wm-expand-icon" class="iconochive-down-solid"></span> <span style="font-size:80%">About this capture</span></a>
    </div>
  </div>
    <div id="wm-capinfo" style="border-top:1px solid #777;display:none; overflow: hidden">
            <div style="background-color:#666;color:#fff;font-weight:bold;text-align:center">COLLECTED BY</div>
    <div style="padding:3px;position:relative" id="wm-collected-by-content">
            <div style="display:inline-block;vertical-align:top;width:50%;">
			<span class="c-logo" style="background-image:url(https://archive.org/services/img/archiveteam);"></span>
		Organization: <a style="color:#33f;" href="https://archive.org/details/archiveteam" target="_new"><span class="wm-title">Archive Team</span></a>
		<div style="max-height:75px;overflow:hidden;position:relative;">
	  <div style="position:absolute;top:0;left:0;width:100%;height:75px;background:linear-gradient(to bottom,rgba(255,255,255,0) 0%,rgba(255,255,255,0) 90%,rgba(255,255,255,255) 100%);"></div>
	  <img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/Archiveteam.htm" width="200" align="right">
 Formed in 2009, the Archive Team (not to be confused with the 
archive.org Archive-It Team) is a rogue archivist collective dedicated 
to saving copies of rapidly dying or deleted websites for the sake of 
history and digital heritage. The group is 100% composed of volunteers 
and interested parties, and has expanded into a large amount of related 
projects for saving online and digital history.
<p>
History is littered with hundreds of conflicts over the future of a 
community, group, location or business that were "resolved" when one of 
the parties stepped ahead and destroyed what was there. With the 
original point of contention destroyed, the debates would fall to the 
wayside. Archive Team believes that by duplicated condemned data, the 
conversation and debate can continue, as well as the richness and 
insight gained by keeping the materials. Our projects have ranged in 
size from a single volunteer downloading the data to a 
small-but-critical site, to over 100 volunteers stepping forward to 
acquire terabytes of user-created data to save for future generations.
</p><p>
The main site for Archive Team is at <a href="http://www.archiveteam.org/">archiveteam.org</a> and contains up to the date information on various projects, manifestos, plans and walkthroughs.
</p><p>
This collection contains the output of many Archive Team projects, both 
ongoing and completed. Thanks to the generous providing of disk space by
 the Internet Archive, multi-terabyte datasets can be made available, as
 well as in use by the <a href="http://archive.org/web/web.php">Wayback Machine</a>, providing a path back to lost websites and work. 
</p><p>
Our collection has grown to the point of having sub-collections for the 
type of data we acquire. If you are seeking to browse the contents of 
these collections, the Wayback Machine is the best first stop. 
Otherwise, you are free to dig into the stacks to see what you may find.
</p><p>
<b>The Archive Team Panic Downloads</b> are full pulldowns of currently 
extant websites, meant to serve as emergency backups for needed sites 
that are in danger of closing, or which will be missed dearly if 
suddenly lost due to hard drive crashes or server failures. 
</p><p>
	</p></div>
	      </div>
      <div style="display:inline-block;vertical-align:top;width:49%;">
			<span class="c-logo" style="background-image:url(https://archive.org/services/img/archivebot)"></span>
		<div>Collection: <a style="color:#33f;" href="https://archive.org/details/archivebot" target="_new"><span class="wm-title">ArchiveBot: The Archive Team Crowdsourced Crawler</span></a></div>
		<div style="max-height:75px;overflow:hidden;position:relative;">
	  <div style="position:absolute;top:0;left:0;width:100%;height:75px;background:linear-gradient(to bottom,rgba(255,255,255,0) 0%,rgba(255,255,255,0) 90%,rgba(255,255,255,255) 100%);"></div>
	  ArchiveBot is an IRC bot designed to automate the archival of smaller
 websites (e.g. up to a few hundred thousand URLs). You give it a URL to
 start at, and it grabs all content under that URL, records it in a 
WARC, and then uploads that WARC to ArchiveTeam servers for eventual 
injection into the Internet Archive (or other archive sites).
<p>
To use ArchiveBot, drop by #archivebot on EFNet. To interact with 
ArchiveBot, you issue commands by typing it into the channel. Note you 
will need channel operator permissions in order to issue archiving jobs.
 The dashboard shows the sites being downloaded currently.
</p><p>
There is a dashboard running for the archivebot process at <a href="http://www.archivebot.com/">http://www.archivebot.com</a>.
</p><p>
ArchiveBot's source code can be found at <a href="https://github.com/ArchiveTeam/ArchiveBot">https://github.com/ArchiveTeam/ArchiveBot</a>.
	</p></div>
	      </div>
    </div>
    <div style="background-color:#666;color:#fff;font-weight:bold;text-align:center" title="Timestamps for the elements of this page">TIMESTAMPS</div>
    <div>
      <div id="wm-capresources" style="margin:0 5px 5px 5px;max-height:250px;overflow-y:scroll !important"></div>
      <div id="wm-capresources-loading" style="text-align:left;margin:0 20px 5px 5px;display:none"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/loading.gif" alt="loading"></div>
    </div>
  </div></div></div></div><!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script type="text/javascript" src="Arbitrary-palette%20positional%20dithering%20algorithm_files/timestamp.js" charset="utf-8"></script>
<script type="text/javascript" src="Arbitrary-palette%20positional%20dithering%20algorithm_files/graph-calc.js" charset="utf-8"></script>
<script type="text/javascript" src="Arbitrary-palette%20positional%20dithering%20algorithm_files/auto-complete.js" charset="utf-8"></script>
<script type="text/javascript" src="Arbitrary-palette%20positional%20dithering%20algorithm_files/toolbar.js" charset="utf-8"></script>
<style type="text/css">
body {
  margin-top:0 !important;
  padding-top:0 !important;
  /*min-width:800px !important;*/
}
.wb-autocomplete-suggestions {
    text-align: left; cursor: default; border: 1px solid #ccc; border-top: 0; background: #fff; box-shadow: -1px 1px 3px rgba(0,0,0,.1);
    position: absolute; display: none; z-index: 2147483647; max-height: 254px; overflow: hidden; overflow-y: auto; box-sizing: border-box;
}
.wb-autocomplete-suggestion { position: relative; padding: 0 .6em; line-height: 23px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; font-size: 1.02em; color: #333; }
.wb-autocomplete-suggestion b { font-weight: bold; }
.wb-autocomplete-suggestion.selected { background: #f0f0f0; }
</style>
<script type="text/javascript">
__wm.bt(575,27,25,2,"web","http://bisqwit.iki.fi/story/howto/dither/jy/","2017-10-24",1996);
</script><div class="wb-autocomplete-suggestions "></div>
<!-- END WAYBACK TOOLBAR INSERT -->




<h1><a name="JoelYliluomaSArbitraryPalettePositionalDitheringAlgorithm"></a>Joel Yliluoma's arbitrary-palette positional dithering algorithm</h1><div class="deeper">
<div class="toc">Table of contents [<span onclick="expandTree('wikitoc1')" class="mktreecmd">expand all</span>] [<span onclick="collapseTree('wikitoc1')" class="mktreecmd">collapse all</span>]<br>
<ul class="mktree" id="wikitoc1"><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#Abstract">Abstract
</a></li><li class="liClosed"><span class="bullet">&nbsp;</span><a href="#Algorithms">Algorithms
</a><ul><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#UnditheredRendering">Undithered rendering
</a></li><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#ErrorDiffusionDithers">Error diffusion dithers
</a></li><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#StandardOrderedDitheringAlgorithm">Standard ordered dithering algorithm
</a></li><li class="liClosed"><span class="bullet">&nbsp;</span><a href="#YliluomaSOrderedDitheringAlgorithm 1">Yliluoma's ordered dithering algorithm 1
</a><ul><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#PsychovisualModel">Psychovisual model
</a></li><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#Refinements">Refinements
</a></li><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#TriToneDithering">Tri-tone dithering
</a></li></ul></li><li class="liClosed"><span class="bullet">&nbsp;</span><a href="#YliluomaSOrderedDitheringAlgorithm 2">Yliluoma's ordered dithering algorithm 2
</a><ul><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#GammaCorrection">Gamma correction
</a></li></ul></li><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#YliluomaSOrderedDitheringAlgorithm 3">Yliluoma's ordered dithering algorithm 3
</a></li><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#ImprovementToYliluomaSAlgorithm 1">Improvement to Yliluoma's algorithm 1
</a></li></ul></li><li class="liClosed"><span class="bullet">&nbsp;</span><a href="#StateOfArtAvailableInCurrentSoftwareComparison">State of art available in current software (comparison)
</a><ul><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#PatternDitheringThePatentedAlgorithmUsedInAdobePhotoshop">Pattern dithering, the patented algorithm used in Adobe® Photoshop®
</a></li></ul></li><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#AnimatedComparison">Animated comparison
</a></li><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#FromThereToHere">From there to here
</a></li><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#Appendix 1GammaCorrection">Appendix 1: Gamma correction
</a></li><li class="liClosed"><span class="bullet">&nbsp;</span><a href="#Appendix 2ThresholdMatrix">Appendix 2: Threshold matrix
</a><ul><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#AlgorithmForGeneratingARectangleShapedMatrix">Algorithm for generating a rectangle-shaped matrix
</a></li><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#ComparisonOfDifferentMatrixSizes">Comparison of different matrix sizes
</a></li></ul></li><li class="liClosed"><span class="bullet">&nbsp;</span><a href="#Appendix 3ColorComparisons">Appendix 3: Color comparisons
</a><ul><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#UsingKdTreeToOptimizePaletteSearches">Using kd-tree to optimize palette searches
</a></li></ul></li><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#Appendix 4PngCompression">Appendix 4: PNG compression
</a></li><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#Authors">Authors
</a></li><li class="liBullet"><span class="bullet">&nbsp;</span><a href="#Literature">Literature
</a></li></ul></div>
<h2><a name="Abstract"></a>Abstract</h2><div class="deeper">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scene.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scene.png" class="embedright" alt="right"></a>
This paper introduces a patent-free<b>¹</b> positional (ordered) dithering algorithm
that is applicable for arbitrary palettes. Such dithering algorithm
can be used to change truecolor animations into paletted ones, while
maximally avoiding unintended jitter arising from dithering.
<p><a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenepal.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenepal.png" class="embedleft" alt="left"></a>
For most of the article, we will use this example truecolor picture
and palette.
The scene is from a PSX game called Chrono&nbsp;Cross, and the palette
has been manually selected for this particular task.
</p><p>You may immediately notice that the palette is not regular; although there
are clearly <em>some</em> gradients, the gradients are not regularly spaced.<br clear="all">
</p></div><h2><a name="Algorithms"></a>Algorithms</h2><div class="deeper">
<h3><a name="UnditheredRendering"></a>Undithered rendering</h3><div class="deeper">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenenodither.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenenodither.png" class="embedleft" alt="left"></a>
Undithered rendering is, in pseudo code:
<p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf6Z2BR2">  For each pixel</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Input</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> in the original picture</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">    Color </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> FindClosestColorFrom</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">Palette</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Input</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    Draw pixel </span><span class="jSfWtbTI">using</span><span class="jSf6Z2BR2"> that color</span><span class="jSfVQfQP2">.</span></pre>
It will produce a picture like that on the left.
The exact appearance depends on the particular "closest color" function.
Most software uses a simple euclidean RGB distance to determine
how well colors match, i.e. <tt>√(ΔRed²&nbsp;+&nbsp;ΔGreen²&nbsp;+&nbsp;ΔBlue²)</tt>.
We will also begin from there.<br clear="all">
</div><h3><a name="ErrorDiffusionDithers"></a>Error diffusion dithers</h3><div class="deeper">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/jittest_floyd.gif"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/jittest_floyd.gif" class="embedright" alt="right"></a>
Error diffusion dithers work by distributing an error to neighboring
pixels in hope that one error won't show when the <em>whole</em> picture
is equally off. Although it works great for static pictures, it won't
work for animation.
<p>On the right is an animation with the single static screenshot shown above.
A <em>single yellow pixel</em> was added to the image and moved around.
The animation has been quantized to 16 colors and dithered
using Floyd-Steinberg dithering. An entire cone of jittering
artifacts gets spawned from that single point downwards and to the right.
</p><p>There exist different error diffusion dithers, but they all suffer from the
same problem. Aside from Riemersma (which walks through the pixels in
a non-linear order) and Scolorq (which treats an entire image at once),
they all use the same algorithm, only differing on the
<a class="extlink" id="i56095988" href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/error_diffusion.txt">diffusion map</a>
that they use.
</p></div><h3><a name="StandardOrderedDitheringAlgorithm"></a>Standard ordered dithering algorithm</h3><div class="deeper">
Standard ordered dithering, which uses the Bayer threshold matrix, is:
<p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf6Z2BR2">  Threshold </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> COLOR</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">256</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">4</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">256</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">4</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">256</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">4</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">/* Estimated precision of the palette */
</span><span class="jSf6Z2BR2">  For each pixel</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Input</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> in the original picture</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">    Factor  </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> ThresholdMatrix</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">xcoordinate </span><span class="jSfVQfQP2">%</span><span class="jSf6Z2BR2"> X</span><span class="jSfqHLeV2">][</span><span class="jSf6Z2BR2">ycoordinate </span><span class="jSfVQfQP2">%</span><span class="jSf6Z2BR2"> Y</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">    Attempt </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Input </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> Factor </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> Threshold
    Color </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> FindClosestColorFrom</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">Palette</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Attempt</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    Draw pixel </span><span class="jSfWtbTI">using</span><span class="jSf6Z2BR2"> Color</span></pre>
If we translate this into PHP, a whole test program becomes
(using the image and palette that is described after the program):
<p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf1s0jc3">&lt;?php

</span><span class="jSfnT6pa2">/* Create a 8x8 threshold map */
</span><span class="jSfogcyW2">$map</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">array_map</span><span class="jSfoF-_93">(</span><span class="jSfWtbTI">function</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$p</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                 </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">                   </span><span class="jSfogcyW2">$q</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$p</span><span class="jSf6Z2BR2"> </span><span class="jSf3GAIN1">^</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$p</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">3</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">                   </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(((</span><span class="jSfogcyW2">$p</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">4</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">2</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">|</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">((</span><span class="jSfogcyW2">$q</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">4</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">1</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                         </span><span class="jSfoF-_93">|</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">((</span><span class="jSfogcyW2">$p</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">2</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&lt;&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">|</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">((</span><span class="jSfogcyW2">$q</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">2</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&lt;&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">2</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                         </span><span class="jSfoF-_93">|</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">((</span><span class="jSfogcyW2">$p</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&lt;&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">4</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">|</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">((</span><span class="jSfogcyW2">$q</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&lt;&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">5</span><span class="jSfoF-_93">))</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">64.0</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">                 </span><span class="jSf9DH-K2">},</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">range</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">63</span><span class="jSfoF-_93">))</span><span class="jSf9DH-K2">;

</span><span class="jSfnT6pa2">/* Define palette */
</span><span class="jSfogcyW2">$pal</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">Array</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">0x080000</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x201A0B</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x432817</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x492910</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">  
             </span><span class="jSfJnSXl1">0x234309</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x5D4F1E</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x9C6B20</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xA9220F</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">             </span><span class="jSfJnSXl1">0x2B347C</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x2B7409</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xD0CA40</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xE8A077</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">             </span><span class="jSfJnSXl1">0x6A94AB</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xD5C4B3</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xFCE76E</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xFCFAE2</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;

</span><span class="jSfnT6pa2">/* Read input image */
</span><span class="jSfogcyW2">$srcim</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">ImageCreateFromPng</span><span class="jSfoF-_93">(</span><span class="jSfMt2g81">'</span><span class="jSf1vtiR2">scene.png</span><span class="jSfMt2g81">'</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSfogcyW2">$w</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">ImageSx</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$srcim</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSfogcyW2">$h</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">ImageSy</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$srcim</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;

</span><span class="jSfnT6pa2">/* Create paletted image */
</span><span class="jSfogcyW2">$im</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">ImageCreate</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$w</span><span class="jSf9DH-K2">,</span><span class="jSfogcyW2">$h</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSfWtbTI">foreach</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$pal</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">as</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$c</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">ImageColorAllocate</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$im</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$c</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$c</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$c</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;

</span><span class="jSfogcyW2">$thresholds</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">Array</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">256</span><span class="jSfoF-_93">/</span><span class="jSfJnSXl1">4</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">256</span><span class="jSfoF-_93">/</span><span class="jSfJnSXl1">4</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">256</span><span class="jSfoF-_93">/</span><span class="jSfJnSXl1">4</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;

</span><span class="jSfnT6pa2">/* Render the paletted image by converting each input pixel using the threshold map. */
</span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$y</span><span class="jSfoF-_93">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$y</span><span class="jSfoF-_93">&lt;</span><span class="jSfogcyW2">$h</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSfogcyW2">$y</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">  </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$x</span><span class="jSfoF-_93">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$x</span><span class="jSfoF-_93">&lt;</span><span class="jSfogcyW2">$w</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSfogcyW2">$x</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">  </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSfogcyW2">$map_value</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$map</span><span class="jSf9DH-K2">[</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$x</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">7</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">((</span><span class="jSfogcyW2">$y</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">7</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&lt;&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">3</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">];</span><span class="jSf6Z2BR2"> 
    </span><span class="jSfogcyW2">$color</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">ImageColorsForIndex</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$srcim</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">ImageColorAt</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$srcim</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$x</span><span class="jSf9DH-K2">,</span><span class="jSfogcyW2">$y</span><span class="jSfoF-_93">))</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfogcyW2">$r</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfWtbTI">int</span><span class="jSfoF-_93">)(</span><span class="jSfogcyW2">$color</span><span class="jSf9DH-K2">[</span><span class="jSfMt2g81">'</span><span class="jSf1vtiR2">red</span><span class="jSfMt2g81">'</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2">   </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$map_value</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$thresholds</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfogcyW2">$g</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfWtbTI">int</span><span class="jSfoF-_93">)(</span><span class="jSfogcyW2">$color</span><span class="jSf9DH-K2">[</span><span class="jSfMt2g81">'</span><span class="jSf1vtiR2">green</span><span class="jSfMt2g81">'</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$map_value</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$thresholds</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfogcyW2">$b</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfWtbTI">int</span><span class="jSfoF-_93">)(</span><span class="jSfogcyW2">$color</span><span class="jSf9DH-K2">[</span><span class="jSfMt2g81">'</span><span class="jSf1vtiR2">blue</span><span class="jSfMt2g81">'</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2">  </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$map_value</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$thresholds</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfnT6pa2">/* Plot using the palette index with color that is closest to this value */</span><span class="jSf6Z2BR2">     
    </span><span class="jSfogcyW2">ImageSetPixel</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$im</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$x</span><span class="jSf9DH-K2">,</span><span class="jSfogcyW2">$y</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">ImageColorClosest</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$im</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$r</span><span class="jSf9DH-K2">,</span><span class="jSfogcyW2">$g</span><span class="jSf9DH-K2">,</span><span class="jSfogcyW2">$b</span><span class="jSfoF-_93">))</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">  </span><span class="jSf9DH-K2">}
</span><span class="jSfogcyW2">ImagePng</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$im</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfMt2g81">'</span><span class="jSf1vtiR2">scenebayer0.png</span><span class="jSfMt2g81">'</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;</span></pre>
Here is what this program produces:<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenebayer0.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenebayer0.png" class="embedleft" alt="left"></a>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/webpal.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/webpal.png" class="embedright" alt="right"></a>
There are many immediate problems one may notice in this picture, the most
important being that it simply <em>looks bad</em>.
The reason why this is an inadequate algorithm <em>as is</em> is because the algorithm
assumes that the palette contains equally spaced elements on each of the R,G,B axis.
An example of such palette is the <em>web-safe palette</em> (shown on the right),
which contains colors for each combination of six-bit red, green and blue.<br>
However, in practical applications, this is rarely the case. An example would
be developing a game for a handheld device that can only display 16 simultaneous
colors from a larger palette. The 16 colors would have to be an optimal
representation of the colors present in original graphics.<br clear="all">
Although the algorithm can be slightly improved by <em>measuring</em> rather than
estimating the maximum distance between successive values on each channel
in the palette (below), such improvements only rarely give a
satisfying outcome. They also tend to reduce the dithering
benefits (compare the hanging gray curtain before and after).<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenebayer.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenebayer.png" class="embedleft" alt="left"></a>
<pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSfnT6pa2">/* Find the maximum distance between successive values on each channel in the palette */
</span><span class="jSfogcyW2">$thresholds</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">Array</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSfWtbTI">foreach</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$thresholds</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">as</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$channel</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&amp;</span><span class="jSfogcyW2">$t</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">  </span><span class="jSfogcyW2">$values</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSf">array_map</span><span class="jSfoF-_93">(</span><span class="jSfWtbTI">function</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$val</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">use</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$channel</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                      </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">                        </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$val</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$channel</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">))</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">                      </span><span class="jSf9DH-K2">},</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$pal</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">  </span><span class="jSf">sort</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$values</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfnT6pa2">/* Sort the color values of the palette in ascending order */
</span><span class="jSf6Z2BR2">  </span><span class="jSf">array_reduce</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$values</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">               </span><span class="jSfWtbTI">function</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$p</span><span class="jSf9DH-K2">,</span><span class="jSfogcyW2">$val</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">use</span><span class="jSfoF-_93">(&amp;</span><span class="jSfogcyW2">$t</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$t</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">=</span><span class="jSf6Z2BR2"> </span><span class="jSf">max</span><span class="jSfoF-_93">(</span><span class="jSfogcyW2">$t</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$val</span><span class="jSfoF-_93">-</span><span class="jSfogcyW2">$p</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfogcyW2">$val</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">},
</span><span class="jSf6Z2BR2">               </span><span class="jSfogcyW2">$values</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
}</span></pre>
We present here several algorithms that have the "goods" from
Bayer's ordered dithering algorithm (namely, the color of a pixel
depends on that pixel alone, making it suitable for animations),
but is applicable to arbitrary palettes.
</div><h3><a name="YliluomaSOrderedDitheringAlgorithm 1"></a>Yliluoma's ordered dithering algorithm 1</h3><div class="deeper">
We begin by making the observation that the ordered dithering algorithm
always mixes <em>two</em> colors together in a variable proportion.
<p>Using the same principle, we begin by envisioning a method
of optimizing that pair of colors:
</p><p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf6Z2BR2">  For each pixel</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Input</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> in the original picture</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">    Factor  </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> ThresholdMatrix</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">xcoordinate </span><span class="jSfVQfQP2">%</span><span class="jSf6Z2BR2"> X</span><span class="jSfqHLeV2">][</span><span class="jSf6Z2BR2">ycoordinate </span><span class="jSfVQfQP2">%</span><span class="jSf6Z2BR2"> Y</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">    Make a Plan</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> based on Input and the Palette</span><span class="jSfVQfQP2">.

</span><span class="jSf6Z2BR2">    If Factor </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> Plan</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">ratio</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">      Draw pixel </span><span class="jSfWtbTI">using</span><span class="jSf6Z2BR2"> Plan</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">color2
    </span><span class="jSfWtbTI">else</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">      Draw pixel </span><span class="jSfWtbTI">using</span><span class="jSf6Z2BR2"> Plan</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">color1</span></pre>
The Planning procedure can be implemented as follows:
<p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf6Z2BR2">  SmallestPenalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">10</span><span class="jSfVQfQP2">^</span><span class="jSfA8tmj1">99</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">/* Impossibly large number */
</span><span class="jSf6Z2BR2">  For each </span><span class="jSfTvV9Y2">unique</span><span class="jSf6Z2BR2"> combination of two colors from the palette</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Color1 and Color2</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">    For each possible Ratio</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">..</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">X</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">Y</span><span class="jSfVQfQP2">-</span><span class="jSfA8tmj1">1</span><span class="jSfVQfQP2">):
</span><span class="jSf6Z2BR2">      </span><span class="jSfTJArG3">/* Determine what mixing the two colors in this proportion will produce */
</span><span class="jSf6Z2BR2">      Mixed </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Color1 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> Ratio </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">Color2 </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> Color1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">X</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">Y</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">      </span><span class="jSfTJArG3">/* Rate how well it matches what we want to accomplish */
</span><span class="jSf6Z2BR2">      Penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Evaluate the difference of Input and Mixed</span><span class="jSfVQfQP2">.
</span><span class="jSf6Z2BR2">      </span><span class="jSfTJArG3">/* Keep the result that has the smallest error */
</span><span class="jSf6Z2BR2">      If Penalty </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> SmallestPenalty</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">        SmallestPenalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Penalty
        Plan </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> Color1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Color2</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Ratio </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">X</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">Y</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}</span><span class="jSfVQfQP2">.</span></pre>
This function runs for
M&nbsp;×&nbsp;N&nbsp;×&nbsp;(N&nbsp;−1)&nbsp;&nbsp;÷&nbsp;2&nbsp;+&nbsp;N
iterations for a palette of size N and a dithering pattern of size M = X×Y,
complexity being O(N²×M), and it depends on an evaluation function.
<p>The evaluation function might be defined using an euclidean distance
between the two colors, considered as three-dimensional vectors
formed by the Red, Green and Blue color components, i.e.
<tt>√(ΔRed²&nbsp;+&nbsp;ΔGreen²&nbsp;+&nbsp;ΔBlue²)</tt> as discussed earlier.
</p><p>The whole program becomes in C++:
</p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSfAdB3O2">#include &lt;gd.h&gt;
#include &lt;stdio.h&gt;

</span><span class="jSfTJArG3">/* 8x8 threshold map */
</span><span class="jSfAdB3O2">#define d(x) x/64.0
</span><span class="jSf4ooiC1">static</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> </span><span class="jSfTvV9Y2">map</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">8</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">8</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">d</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">48</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">12</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">60</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">3</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">51</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">15</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">63</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">32</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">16</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">44</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">28</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">35</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">19</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">47</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">31</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">d</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">8</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">56</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">4</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">52</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">11</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">59</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">7</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">55</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">40</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">24</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">36</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">20</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">43</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">27</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">39</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">23</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">d</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">2</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">50</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">14</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">62</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">49</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">13</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">61</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">34</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">18</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">46</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">30</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">33</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">17</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">45</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">29</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">10</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">58</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">6</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">54</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">9</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">57</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">5</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">53</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">42</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">26</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">38</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">22</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">41</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">25</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">37</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">21</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">};
</span><span class="jSfAdB3O2">#undef d

</span><span class="jSfTJArG3">/* Palette */
</span><span class="jSf4ooiC1">static</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> pal</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">16</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=
</span><span class="jSfqHLeV2">{</span><span class="jSfA8tmj1">0x080000</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0x201A0B</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0x432817</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0x492910</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0x234309</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0x5D4F1E</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0x9C6B20</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0xA9220F</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0x2B347C</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0x2B7409</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0xD0CA40</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0xE8A077</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0x6A94AB</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0xD5C4B3</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0xFCE76E</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0xFCFAE2</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">};

</span><span class="jSfTJArG3">// Compare the difference of two RGB values
</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> r1</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> g1</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> b1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> r2</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> g2</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> b2</span><span class="jSfVQfQP2">)
</span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> diffR </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">r1</span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">r2</span><span class="jSfVQfQP2">)/</span><span class="jSfA8tmj1">255.0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> diffG </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">g1</span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">g2</span><span class="jSfVQfQP2">)/</span><span class="jSfA8tmj1">255.0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> diffB </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">b1</span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">b2</span><span class="jSfVQfQP2">)/</span><span class="jSfA8tmj1">255.0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> diffR</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">diffR </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> diffG</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">diffG </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> diffB</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">diffB</span><span class="jSfqHLeV2">;
}
</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> EvaluateMixingError</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> r</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> g</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> b</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// Desired color
</span><span class="jSf6Z2BR2">                           </span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> r0</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> g0</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> b0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">// Mathematical mix product
</span><span class="jSf6Z2BR2">                           </span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> r1</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> g1</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> b1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">// Mix component 1
</span><span class="jSf6Z2BR2">                           </span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> r2</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> g2</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> b2</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">// Mix component 2
</span><span class="jSf6Z2BR2">                           </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> ratio</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2">         </span><span class="jSfTJArG3">// Mixing ratio
</span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">r</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">g</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">b</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> r0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">g0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">b0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
}

</span><span class="jSf4ooiC1">struct</span><span class="jSf6Z2BR2"> MixingPlan
</span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> colors</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> ratio</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">/* 0 = always index1, 1 = always index2, 0.5 = 50% of both */
</span><span class="jSfqHLeV2">};
</span><span class="jSf6Z2BR2">MixingPlan DeviseBestMixingPlan</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> color</span><span class="jSfVQfQP2">)
</span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> r </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> color</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">16</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> g </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">color</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">8</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> b </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> color</span><span class="jSfVQfQP2">&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    MixingPlan result </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">},</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.5</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">};
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> least_penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1e99</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// Loop through every unique combination of two colors from the palette,
</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// and through each possible way to mix those two colors. They can be
</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// mixed in exactly 64 ways, when the threshold matrix is 8x8.
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> index1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2">      index1 </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">16</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">index1</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> index2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> index1</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> index2 </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">16</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">index2</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> ratio</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> ratio</span><span class="jSfVQfQP2">&lt;</span><span class="jSfA8tmj1">64</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">ratio</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">index1 </span><span class="jSfVQfQP2">==</span><span class="jSf6Z2BR2"> index2 </span><span class="jSfVQfQP2">&amp;&amp;</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfVQfQP2">!=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">break</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfTJArG3">// Determine the two component colors
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> color1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">index1</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2"> color2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">index2</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> r1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> color1</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">16</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> g1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">color1</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">8</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> b1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> color1</span><span class="jSfVQfQP2">&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> r2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> color2</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">16</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> g2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">color2</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">8</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> b2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> color2</span><span class="jSfVQfQP2">&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfTJArG3">// Determine what mixing them in this proportion will produce
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> r0 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> r1 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">int</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">r2</span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">r1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">64</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> g0 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> g1 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">int</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">g2</span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">g1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">64</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> b0 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> b1 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">int</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">b2</span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">b1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">64</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfTJArG3">// Determine how well that matches what we want to accomplish
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> EvaluateMixingError</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">r</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">g</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">b</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> r0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">g0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">b0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> r1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">g1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">b1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> r2</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">g2</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">b2</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> ratio</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">64.0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">penalty </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> least_penalty</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">// Keep the result that has the smallest error
</span><span class="jSf6Z2BR2">            least_penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> penalty</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">colors</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> index1</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">colors</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> index2</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">ratio </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">64.0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> result</span><span class="jSfqHLeV2">;
}

</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> main</span><span class="jSfVQfQP2">()
</span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">    FILE</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> fp </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> fopen</span><span class="jSfVQfQP2">(</span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">scene.png</span><span class="jSfMt2g81">"</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">rb</span><span class="jSfMt2g81">"</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    gdImagePtr srcim </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> gdImageCreateFromPng</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    fclose</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> w </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> gdImageSX</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> h </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> gdImageSY</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    gdImagePtr im </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> gdImageCreate</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">w</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> h</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> c</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> c</span><span class="jSfVQfQP2">&lt;</span><span class="jSfA8tmj1">16</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">c</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        gdImageColorAllocate</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">im</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> pal</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">16</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">pal</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">8</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> pal</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">  </span><span class="jSfAdB3O2">#pragma omp parallel for
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> y</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> y</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">h</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">y</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> x</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> x</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">w</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">x</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">          </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> map_value </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfTvV9Y2">map</span><span class="jSfqHLeV2">[</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">x </span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">7</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">y </span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">7</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">3</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">          </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> color </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> gdImageGetTrueColorPixel</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> x</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> y</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">          MixingPlan plan </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> DeviseBestMixingPlan</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">color</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">          gdImageSetPixel</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">im</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> x</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">y</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> plan</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">colors</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2"> map_value </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> plan</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">ratio </span><span class="jSfVQfQP2">?</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    fp </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> fopen</span><span class="jSfVQfQP2">(</span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">scenedither1.png</span><span class="jSfMt2g81">"</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">wb</span><span class="jSfMt2g81">"</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    gdImagePng</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">im</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> fp</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    fclose</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> gdImageDestroy</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">im</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> gdImageDestroy</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
}</span></pre>
The result of this program is shown below (on the right-hand side, the standard ordered-dithered version):<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither1.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenedither1.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither1.png"></a>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenebayer.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenebayer.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenebayer.png"></a>
<p>There are two problems with this trivial implementation:
</p><ul><li> It is very slow.
</li><li> There is a lot of visual noise.
</li></ul>On the other hand, there are two advantages visible already:
<ul><li> Overall, there is a lot more color [than in the standard version], and the scene does not look that washed out anymore.
</li></ul><p>This is the mathematically correct result, assuming gamma of 1.0.
If one substitutes temporal dithering for the spatial dithering,
it is easy to see that the wild dithering patterns do indeed produce,
by average, colors very close to the originals. However, the human brain
just sees a lot of bright and dim pixels where there should be none.
Temporal dithering will be covered later in this article.
</p><p>Therefore, <em>psychovisual</em> concerns must also be accounted for when
implementing this algorithm.
</p><p>Consider this example palette: #000000, #FFFFFFF, #7E8582, #8A7A76.
For producing a color #808080, one might combine the two extremes,
black and white. However, this produces a very nasty visual effect.
It is better to combine the two slightly tinted values near the
intended result, even though it produces #847F7C, a noticeably
red-tinted gray value, rather than the mathematically
accurate #808080 that would be acquired from combining the two other values.
</p><p>The psychovisual model that we introduce, consists of three parts:
</p><ul><li> Algorithm for comparing the similarity of two color values.
</li><li> Criteria for deciding which pixels can be paired together.
</li><li> Gamma correction (technically not <em>psycho</em>visual, because it is just physics).
</li></ul><h4><a name="PsychovisualModel"></a>Psychovisual model</h4><div class="deeper">
The simplest way to adjust the psychovisual model is to add some code
that considers the difference between the two pixel values that are being
mixed in the dithering process, and penalizes combinations that differ
too much.
<p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> EvaluateMixingError</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">    </span><span class="jSfnT6pa2">// Desired color
</span><span class="jSf6Z2BR2">                           </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r0</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g0</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfnT6pa2">// Mathematical mix product
</span><span class="jSf6Z2BR2">                           </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r1</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g1</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfnT6pa2">// Mix component 1
</span><span class="jSf6Z2BR2">                           </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r2</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g2</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b2</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfnT6pa2">// Mix component 2
</span><span class="jSf6Z2BR2">                           </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> ratio</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2">         </span><span class="jSfnT6pa2">// Mixing ratio
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b0</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">         </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r2</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g2</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b2</span><span class="jSfoF-_93">)*</span><span class="jSfJnSXl1">0.1</span><span class="jSf9DH-K2">;
}</span></pre>
The result is shown below:<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither2.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenedither2.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither2.png"></a>
<p>Though the result looks very nice now, there are still many ways the
algorithm can still be improved. For instance, the color comparison
function could be improved by a great deal.
Wikipedia has an <a class="extlink" id="iE8768EB0" href="http://web.archive.org/web/20171024201240/http://en.wikipedia.org/wiki/Color_difference">entire article</a>
about the topic of comparing two color values.
Most of the improved color comparison functions are based on the CIE
colorspace, but simple improvements can be done in the RGB space too.
Such a simple improvement is shown below. We might call this RGB<sup>L</sup>,
for luminance-weighted RGB.
</p><p>The EvaluateMixingError function was also changed to weigh the
component difference only in inverse proportion to the mixing evenness.
</p><p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSfnT6pa2">// Compare the difference of two RGB values, weigh by CCIR 601 luminosity:
</span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r1</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g1</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r2</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g2</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b2</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> luma1 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r1</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> g1</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> b1</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">114</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">255.0</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">1000</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> luma2 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r2</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> g2</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> b2</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">114</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">255.0</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">1000</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> lumadiff </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> luma1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">luma2</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> diffR </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">r2</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">255.0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> diffG </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">g2</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">255.0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> diffB </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">b2</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">255.0</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">diffR</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">diffR</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">0.299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> diffG</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">diffG</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">0.587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> diffB</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">diffB</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">0.114</span><span class="jSfoF-_93">)*</span><span class="jSfJnSXl1">0.75
</span><span class="jSf6Z2BR2">         </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> lumadiff</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">lumadiff</span><span class="jSf9DH-K2">;
}

</span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> EvaluateMixingError</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">                           </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r0</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g0</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b0</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">                           </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r1</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g1</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b1</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">                           </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r2</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g2</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b2</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">                           </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> ratio</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b0</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> 
         </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r2</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g2</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b2</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0.1</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">fabs</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">ratio</span><span class="jSfoF-_93">-</span><span class="jSfJnSXl1">0.5</span><span class="jSfoF-_93">)+</span><span class="jSfJnSXl1">0.5</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
}</span></pre>
<p>The result is shown below. Improvements can be seen in the rightside
window and in the girl's skirt, among other places.<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither4.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenedither4.png" class="embedleft" alt="left"></a>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither2.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenedither2.png" class="embedleft" alt="left"></a>
<br>
Left:  After tweaking the color comparison function.<br>
Right: Before tweaking the color comparison function.<br clear="all">
</p></div><h4><a name="Refinements"></a>Refinements</h4><div class="deeper">
This version of DeviseBestMixingPlan calculates the mixing ratio mathematically
rather than by iterating. It ends up being about 64 times faster than the
iterating version, and differs only neglibly.<br>
The function now runs for N²÷2 iterations for a palette of size N.
<pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf6Z2BR2">MixingPlan DeviseBestMixingPlan</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> r </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> g </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> b </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    MixingPlan result </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">},</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0.5</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> least_penalty </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">1e99</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> index1 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> index1 </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">index1</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> index2 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> index1</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> index2 </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">index2</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">    </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSfnT6pa2">// Determine the two component colors
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> color1 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">index1</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2"> color2 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">index2</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> r1 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> color1</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> g1 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color1</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> b1 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> color1</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> r2 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> color2</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> g2 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color2</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> b2 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> color2</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">32</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color1 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> color2</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSfnT6pa2">// Determine the ratio of mixing for each channel.
</span><span class="jSf6Z2BR2">            </span><span class="jSfnT6pa2">//   solve(r1 + ratio*(r2-r1)/64 = r, ratio)
</span><span class="jSf6Z2BR2">            </span><span class="jSfnT6pa2">// Take a weighed average of these three ratios according to the
</span><span class="jSf6Z2BR2">            </span><span class="jSfnT6pa2">// perceived luminosity of each channel (according to CCIR 601).
</span><span class="jSf6Z2BR2">            ratio </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">((</span><span class="jSf6Z2BR2">r2 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> r1 </span><span class="jSfoF-_93">?</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">299</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">64</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r </span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2"> r1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r2</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">r1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">:</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                  </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2">  </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g2 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> g1 </span><span class="jSfoF-_93">?</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">587</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">64</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g </span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2"> g1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g2</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">g1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">:</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                  </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2">  </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b1 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> b2 </span><span class="jSfoF-_93">?</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">114</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">64</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b </span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2"> b1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b2</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">b1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">:</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">))
</span><span class="jSf6Z2BR2">                  </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">((</span><span class="jSf6Z2BR2">r2 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> r1 </span><span class="jSfoF-_93">?</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">:</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                   </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g2 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> g1 </span><span class="jSfoF-_93">?</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">:</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                   </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b2 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> b1 </span><span class="jSfoF-_93">?</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">114</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">:</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">))</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">ratio </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">ratio </span><span class="jSfoF-_93">&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">63</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">63</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2">   
        </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSfnT6pa2">// Determine what mixing them in this proportion will produce
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> r0 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> r1 </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r2</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">r1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">64</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> g0 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> g1 </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g2</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">g1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">64</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> b0 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> b1 </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b2</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">b1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">64</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> penalty </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> EvaluateMixingError</span><span class="jSfoF-_93">(
</span><span class="jSf6Z2BR2">            r</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r2</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g2</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b2</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">            ratio </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">double</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">64</span><span class="jSfoF-_93">))</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">penalty </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> least_penalty</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">            least_penalty </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> penalty</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> index1</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> index2</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">ratio </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">double</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">64</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> result</span><span class="jSf9DH-K2">;
}</span></pre>
With these changes, the rendering result becomes:<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither5.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenedither5.png" class="embedleft" alt="left"></a>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither4.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenedither4.png" class="embedleft" alt="left"></a>
<br>
Left: Faster planner<br>
Right: Slower and more thorough planner
<br clear="all">
The quality did suffer slightly, but the faster rendering might still be worth it.
<p>When non-realtime rendering is not desired, such as when pre-rendering
static pictures or animations for later presentation,
one might want to strive for better quality and continue using the slower,
looping method.
The remainder of this article's pictures will continue using the loop.
</p></div><h4><a name="TriToneDithering"></a>Tri-tone dithering</h4><div class="deeper">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither6.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenedither6.png" class="embedright" alt="right"></a>
The final improvement for this algorithm for now
that is covered in this article is <em>tri-tone dithering</em>.
It is a three-color dithering algorithm with a fixed 2x2 matrix, where one of
the colors occurs at 50% proportion and the others occur at 25% proportion.
An example of using this approach is shown on the right.
<p>The complete source code is shown below.
The DeviseBestMixingPlan function now runs for
N²&nbsp;×&nbsp;(N&nbsp;−&nbsp;1)&nbsp;÷&nbsp;2
iterations for a palette of size N, for
a complexity of O(N<sup>3</sup>).
<br clear="all">
</p><p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf-8GPi2">#include &lt;gd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

</span><span class="jSfnT6pa2">/* 8x8 threshold map */
</span><span class="jSf-8GPi2">#define d(x) x/64.0
</span><span class="jSf5gZog2">static</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> map</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">8</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">d</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">48</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">12</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">60</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">3</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">51</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">15</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">63</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">32</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">16</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">44</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">28</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">35</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">19</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">47</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">31</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">d</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">56</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">4</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">52</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">11</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">59</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">7</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">55</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">40</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">24</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">36</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">20</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">43</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">27</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">39</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">23</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">d</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">2</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">50</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">14</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">62</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">1</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">49</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">13</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">61</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">34</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">18</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">46</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">30</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">33</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">17</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">45</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">29</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">10</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">58</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">6</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">54</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">9</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">57</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">5</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">53</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">42</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">26</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">38</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">22</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">41</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">25</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">37</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> d</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">21</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};
</span><span class="jSf-8GPi2">#undef d

</span><span class="jSfnT6pa2">/* Palette */
</span><span class="jSf5gZog2">static</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=
</span><span class="jSf9DH-K2">{</span><span class="jSfJnSXl1">0x080000</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x201A0B</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x432817</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x492910</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0x234309</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x5D4F1E</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x9C6B20</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xA9220F</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0x2B347C</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x2B7409</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xD0CA40</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xE8A077</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0x6A94AB</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xD5C4B3</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xFCE76E</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xFCFAE2</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};

</span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r1</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g1</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r2</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g2</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b2</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> luma1 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r1</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> g1</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> b1</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">114</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">255.0</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">1000</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> luma2 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r2</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> g2</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> b2</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">114</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">255.0</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">1000</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> lumadiff </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> luma1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">luma2</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> diffR </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">r2</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">255.0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> diffG </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">g2</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">255.0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> diffB </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">b2</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">255.0</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">diffR</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">diffR</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">0.299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> diffG</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">diffG</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">0.587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> diffB</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">diffB</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">0.114</span><span class="jSfoF-_93">)*</span><span class="jSfJnSXl1">0.75
</span><span class="jSf6Z2BR2">         </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> lumadiff</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">lumadiff</span><span class="jSf9DH-K2">;
}
</span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> EvaluateMixingError</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">                           </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r0</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g0</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b0</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">                           </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r1</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g1</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b1</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">                           </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r2</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g2</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b2</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">                           </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> ratio</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b0</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">         </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r2</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g2</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b2</span><span class="jSfoF-_93">)*</span><span class="jSfJnSXl1">0.1</span><span class="jSfoF-_93">*(</span><span class="jSf6Z2BR2">fabs</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">ratio</span><span class="jSfoF-_93">-</span><span class="jSfJnSXl1">0.5</span><span class="jSfoF-_93">)+</span><span class="jSfJnSXl1">0.5</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
}

</span><span class="jSf5gZog2">struct</span><span class="jSf6Z2BR2"> MixingPlan
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> colors</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">4</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> ratio</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfnT6pa2">/* 0 = always index1, 1 = always index2, 0.5 = 50% of both */
</span><span class="jSf6Z2BR2">    </span><span class="jSfnT6pa2">/* 4 = special three or four-color dither */
</span><span class="jSf9DH-K2">};
</span><span class="jSf6Z2BR2">MixingPlan DeviseBestMixingPlan</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> r </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> g </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> b </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    MixingPlan result </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">},</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0.5</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> least_penalty </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">1e99</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> index1 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> index1 </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">index1</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> index2 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> index1</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> index2 </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">index2</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfnT6pa2">//for(int ratio=0; ratio&lt;64; ++ratio)
</span><span class="jSf6Z2BR2">    </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSfnT6pa2">// Determine the two component colors
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> color1 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">index1</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2"> color2 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">index2</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> r1 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> color1</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> g1 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color1</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> b1 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> color1</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> r2 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> color2</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> g2 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color2</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> b2 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> color2</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">32</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color1 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> color2</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSfnT6pa2">// Determine the ratio of mixing for each channel.
</span><span class="jSf6Z2BR2">            </span><span class="jSfnT6pa2">//   solve(r1 + ratio*(r2-r1)/64 = r, ratio)
</span><span class="jSf6Z2BR2">            </span><span class="jSfnT6pa2">// Take a weighed average of these three ratios according to the
</span><span class="jSf6Z2BR2">            </span><span class="jSfnT6pa2">// perceived luminosity of each channel (according to CCIR 601).
</span><span class="jSf6Z2BR2">            ratio </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">((</span><span class="jSf6Z2BR2">r2 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> r1 </span><span class="jSfoF-_93">?</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">299</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">64</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r </span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2"> r1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r2 </span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2"> r1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">:</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                  </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2">  </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g2 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> g1 </span><span class="jSfoF-_93">?</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">587</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">64</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g </span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2"> g1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g2 </span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2"> g1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">:</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                  </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2">  </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b1 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> b2 </span><span class="jSfoF-_93">?</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">114</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">64</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b </span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2"> b1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b2 </span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2"> b1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">:</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">))
</span><span class="jSf6Z2BR2">                  </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">((</span><span class="jSf6Z2BR2">r2 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> r1 </span><span class="jSfoF-_93">?</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">:</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                   </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g2 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> g1 </span><span class="jSfoF-_93">?</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">:</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                   </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b2 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> b1 </span><span class="jSfoF-_93">?</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">114</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">:</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">))</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">ratio </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">ratio </span><span class="jSfoF-_93">&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">63</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">63</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSfnT6pa2">// Determine what mixing them in this proportion will produce
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> r0 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> r1 </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r2</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">r1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">64</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> g0 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> g1 </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g2</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">g1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">64</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> b0 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> b1 </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b2</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">b1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">64</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> penalty </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> EvaluateMixingError</span><span class="jSfoF-_93">(
</span><span class="jSf6Z2BR2">            r</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r2</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g2</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b2</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">            ratio </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">double</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">64</span><span class="jSfoF-_93">))</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">penalty </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> least_penalty</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">            least_penalty </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> penalty</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> index1</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> index2</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">ratio </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> ratio </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">double</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">64</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">index1 </span><span class="jSfoF-_93">!=</span><span class="jSf6Z2BR2"> index2</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> index3 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> index3 </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">index3</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">index3 </span><span class="jSfoF-_93">==</span><span class="jSf6Z2BR2"> index2 </span><span class="jSfoF-_93">||</span><span class="jSf6Z2BR2"> index3 </span><span class="jSfoF-_93">==</span><span class="jSf6Z2BR2"> index1</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">continue</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfnT6pa2">// 50% index3, 25% index2, 25% index1
</span><span class="jSf6Z2BR2">            </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> color3 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">index3</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">            </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> r3 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> color3</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> g3 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color3</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> b3 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> color3</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            r0 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r1 </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> r2 </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> r3</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">2</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">4</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            g0 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g1 </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> g2 </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> g3</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">2</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">4</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            b0 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b1 </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> b2 </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> b3</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">2</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">4</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            penalty </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b0</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                    </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r2</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g2</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b2</span><span class="jSfoF-_93">)*</span><span class="jSfJnSXl1">0.025
</span><span class="jSf6Z2BR2">                    </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">((</span><span class="jSf6Z2BR2">r1</span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2">g1</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">,</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g1</span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2">g2</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">,</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b1</span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2">b2</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r3</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g3</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b3</span><span class="jSfoF-_93">)*</span><span class="jSfJnSXl1">0.025</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">penalty </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> least_penalty</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">            </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">                least_penalty </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> penalty</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">                result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> index3</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfnT6pa2">// (0,0) index3 occurs twice
</span><span class="jSf6Z2BR2">                result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> index1</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfnT6pa2">// (0,1)
</span><span class="jSf6Z2BR2">                result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> index2</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfnT6pa2">// (1,0)
</span><span class="jSf6Z2BR2">                result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> index3</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfnT6pa2">// (1,1)
</span><span class="jSf6Z2BR2">                result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">ratio </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">4.0</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> result</span><span class="jSf9DH-K2">;
}

</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> main</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> argc</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">char</span><span class="jSfoF-_93">**</span><span class="jSf6Z2BR2">argv</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    FILE</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> fp </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> fopen</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">argv</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2"> </span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">rb</span><span class="jSfMt2g81">"</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    gdImagePtr srcim </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageCreateFromPng</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    fclose</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;

</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> w </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageSX</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> h </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageSY</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    gdImagePtr im </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageCreate</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">w</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> h</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> c</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> c</span><span class="jSfoF-_93">&lt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">c</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        gdImageColorAllocate</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">im</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">  </span><span class="jSf-8GPi2">#pragma omp parallel for
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> y</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> y</span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2">h</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">y</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> x</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> x</span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2">w</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">x</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> color </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageGetTrueColorPixel</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> x</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> y</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            MixingPlan plan </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> DeviseBestMixingPlan</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">plan</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">ratio </span><span class="jSfoF-_93">==</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">4.0</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfnT6pa2">// Tri-tone or quad-tone dithering
</span><span class="jSf6Z2BR2">            </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">                gdImageSetPixel</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">im</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> x</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">y</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> plan</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">((</span><span class="jSf6Z2BR2">y</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">1</span><span class="jSfoF-_93">)*</span><span class="jSfJnSXl1">2</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">x</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">1</span><span class="jSfoF-_93">))</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">else
</span><span class="jSf6Z2BR2">            </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">                </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> map_value </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> map</span><span class="jSf9DH-K2">[</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">x </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">7</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">((</span><span class="jSf6Z2BR2">y </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">7</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&lt;&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">3</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">                gdImageSetPixel</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">im</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> x</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">y</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> plan</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2"> map_value </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> plan</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">ratio </span><span class="jSfoF-_93">?</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">1</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">:</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">    fp </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> fopen</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">argv</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2"> </span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">wb</span><span class="jSfMt2g81">"</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    gdImagePng</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">im</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> fp</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    fclose</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> gdImageDestroy</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">im</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> gdImageDestroy</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
}</span></pre>
It is also possible to implement quad-tone dithering,
but it is too slow to calculate (O(N^4)&nbsp;runtime) using
this algorithm. We'll return to that topic later.
</div></div><h3><a name="YliluomaSOrderedDitheringAlgorithm 2"></a>Yliluoma's ordered dithering algorithm 2</h3><div class="deeper">
An altogetherly different dithering algorithm can be devised by discarding
the initial assumption that the dithering mixes <em>two</em> colortones together,
and instead, assuming that each matrix value corresponds to a particular
color tone. A 8x8 matrix has 64 color tones, a 2x2 matrix has 4 color tones,
and so on.
<p>An algorithm for populating such a color array will need to find the N-term
expression of color values that, when combined, will produce a the closest
approximation of the input color.
</p><p>One such algorithm is to start with a guess (the closest color), and then
find out how much it went wrong, and then find out by experimentation which
terms are needed to improve the result.
</p><p>To solve the issue about pixel orientations changing, the colors will
be sorted by luma. They will still change relative orientation, but
such action is relatively minor.
</p><p>In pseudo code, the process of converting
the input bitmap into a target bitmap goes like this:
</p><p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf6Z2BR2">  For each pixel</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Input</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> in the original picture</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">    Achieved      </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSf6Z2BR2">      </span><span class="jSfTJArG3">// Total color sum achieved so far
</span><span class="jSf6Z2BR2">    CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">clear</span><span class="jSfVQfQP2">()
</span><span class="jSf6Z2BR2">    LoopWhile CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Size </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">X </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> Y</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">      Count     </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1
</span><span class="jSf6Z2BR2">      Candidate </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">// Candidate color from palette
</span><span class="jSf6Z2BR2">      Comparison</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">reset</span><span class="jSfVQfQP2">()
</span><span class="jSf6Z2BR2">      Max </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Size</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Or </span><span class="jSfA8tmj1">1</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> empty
      For each Color in palette</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">        AddingCount </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1
</span><span class="jSf6Z2BR2">        LoopWhile AddingCount </span><span class="jSfVQfQP2">&lt;=</span><span class="jSf6Z2BR2"> Max
          Sum         </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Achieved </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> Color </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> AddingCount
          Divide      </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Size </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> AddingCount
          Test        </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Sum </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> Divide
          Compare Test to Input </span><span class="jSfWtbTI">using</span><span class="jSf6Z2BR2"> CIEDE2000 </span><span class="jSfWtbTI">or</span><span class="jSf6Z2BR2"> RGB</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">          If it was the best match since Comparison was reset</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">            Candidate </span><span class="jSfVQfQP2">:</span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Color
            Count     </span><span class="jSfVQfQP2">:</span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> AddingCount
          EndCompare
          AddingCount </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> AddingCount </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">2</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">// Faster version
</span><span class="jSf6Z2BR2">          </span><span class="jSfTJArG3">// AddingCount = AddingCount + 1 // Slower version
</span><span class="jSf6Z2BR2">        EndWhile
      CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Add</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">Candidate</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Count </span><span class="jSfTvV9Y2">times</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">      Achieved </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Achieved </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> Candidate </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> Count
    LoopEnd
    CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Sort</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> by</span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> luminance </span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    Index </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> ThresholdMatrix</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">xcoordinate </span><span class="jSfVQfQP2">%</span><span class="jSf6Z2BR2"> X</span><span class="jSfqHLeV2">][</span><span class="jSf6Z2BR2">ycoordinate </span><span class="jSfVQfQP2">%</span><span class="jSf6Z2BR2"> Y</span><span class="jSfqHLeV2">]
</span><span class="jSf6Z2BR2">    Draw pixel </span><span class="jSfWtbTI">using</span><span class="jSf6Z2BR2"> CandidateList</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">Index </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Size</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">X</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">Y</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">]
</span><span class="jSf6Z2BR2">  EndFor</span></pre>
The color matching function runs
for N&nbsp;×&nbsp;(log2(M)&nbsp;+&nbsp;1) iterations at minimum
and for N&nbsp;×&nbsp;M&nbsp;×&nbsp;log2(M) iterations at maximum.
<p>In C++, it can be written as follows:
</p><p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf-8GPi2">#include &lt;gd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;algorithm&gt; </span><span class="jSfQHvUD">/* For std::sort() */
</span><span class="jSf-8GPi2">#include &lt;map&gt;       </span><span class="jSfQHvUD">/* For associative container, std::map&lt;&gt; */

</span><span class="jSfnT6pa2">/* 8x8 threshold map */
</span><span class="jSf5gZog2">static</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">char</span><span class="jSf6Z2BR2"> map</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">8</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">     </span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">48</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">12</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">60</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">51</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">15</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">63</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfJnSXl1">32</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">44</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">28</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">35</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">19</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">47</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">31</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">     </span><span class="jSfJnSXl1">8</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">56</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">4</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">52</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">11</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">59</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">7</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">55</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfJnSXl1">40</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">24</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">36</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">20</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">43</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">27</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">39</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">23</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">     </span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">50</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">14</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">62</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">49</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">13</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">61</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfJnSXl1">34</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">18</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">46</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">30</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">33</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">17</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">45</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">29</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfJnSXl1">10</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">58</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">6</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">54</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">9</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">57</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">5</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">53</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfJnSXl1">42</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">26</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">38</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">22</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">41</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">25</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">37</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">21</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};

</span><span class="jSfnT6pa2">/* Palette */
</span><span class="jSf5gZog2">static</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=
</span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0x080000</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x201A0B</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x432817</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x492910</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0x234309</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x5D4F1E</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x9C6B20</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xA9220F</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">  </span><span class="jSfJnSXl1">0x2B347C</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x2B7409</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xD0CA40</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xE8A077</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0x6A94AB</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xD5C4B3</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xFCE76E</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xFCFAE2</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};

</span><span class="jSfnT6pa2">/* Luminance for each palette entry, to be initialized as soon as the program begins */
</span><span class="jSf5gZog2">static</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> luma</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">];

</span><span class="jSf5gZog2">bool</span><span class="jSf6Z2BR2"> PaletteCompareLuma</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> index1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> index2</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> luma</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">index1</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> luma</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">index2</span><span class="jSf9DH-K2">];
}
</span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r1</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g1</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r2</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g2</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b2</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> luma1 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r1</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> g1</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> b1</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">114</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">255.0</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">1000</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> luma2 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r2</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> g2</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> b2</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">114</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">255.0</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">1000</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> lumadiff </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> luma1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">luma2</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> diffR </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">r2</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">255.0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> diffG </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">g2</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">255.0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> diffB </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">b2</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">255.0</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">diffR</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">diffR</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">0.299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> diffG</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">diffG</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">0.587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> diffB</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">diffB</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">0.114</span><span class="jSfoF-_93">)*</span><span class="jSfJnSXl1">0.75
</span><span class="jSf6Z2BR2">         </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> lumadiff</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">lumadiff</span><span class="jSf9DH-K2">;
}
</span><span class="jSf5gZog2">struct</span><span class="jSf6Z2BR2"> MixingPlan
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> n_colors </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> colors</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">n_colors</span><span class="jSf9DH-K2">];
};
</span><span class="jSf6Z2BR2">MixingPlan DeviseBestMixingPlan</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    MixingPlan result </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">}</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> src</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> proportion_total </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    
    </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> so_far</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">};

</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">while</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">proportion_total </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> MixingPlan</span><span class="jSfJiEpd3">::</span><span class="jSf6Z2BR2">n_colors</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">    </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> chosen_amount </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> chosen        </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        
        </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> max_test_count </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> std</span><span class="jSfJiEpd3">::</span><span class="jSf6Z2BR2">max</span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">1</span><span class="jSfvraDY3">u</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> proportion_total</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        
        </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> least_penalty </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">-</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> index</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> index</span><span class="jSfoF-_93">&lt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">index</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> color </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">index</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">            </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> sum</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> so_far</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2"> so_far</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2"> so_far</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};
</span><span class="jSf6Z2BR2">            </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> add</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> p</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> p</span><span class="jSfoF-_93">&lt;=</span><span class="jSf6Z2BR2">max_test_count</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> p</span><span class="jSfdoBI62">*=</span><span class="jSfJnSXl1">2</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">            </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> c</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> c</span><span class="jSfoF-_93">&lt;</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">c</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> sum</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">+=</span><span class="jSf6Z2BR2"> add</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> c</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> c</span><span class="jSfoF-_93">&lt;</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">c</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> add</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">+=</span><span class="jSf6Z2BR2"> add</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">                </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> t </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> proportion_total </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> p</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">                </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> test</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> sum</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> t</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> sum</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> t</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> sum</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> t </span><span class="jSf9DH-K2">};
</span><span class="jSf6Z2BR2">                </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> penalty </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">src</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2">src</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2">src</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">],
</span><span class="jSf6Z2BR2">                                              test</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2">test</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2">test</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">penalty </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> least_penalty </span><span class="jSfoF-_93">||</span><span class="jSf6Z2BR2"> least_penalty </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">                    least_penalty </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> penalty</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">                    chosen        </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> index</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">                    chosen_amount </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> p</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">                </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">            </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> p</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> p</span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2">chosen_amount</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">p</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">proportion_total </span><span class="jSfoF-_93">&gt;=</span><span class="jSf6Z2BR2"> MixingPlan</span><span class="jSfJiEpd3">::</span><span class="jSf6Z2BR2">n_colors</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">break</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">proportion_total</span><span class="jSfoF-_93">++</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> chosen</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">}

</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> color </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">chosen</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> palcolor</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};

</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> c</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> c</span><span class="jSfoF-_93">&lt;</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">c</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">            so_far</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">+=</span><span class="jSf6Z2BR2"> palcolor</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> chosen_amount</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfnT6pa2">// Sort the colors according to luminance
</span><span class="jSf6Z2BR2">    std</span><span class="jSfJiEpd3">::</span><span class="jSf6Z2BR2">sort</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2">MixingPlan</span><span class="jSfJiEpd3">::</span><span class="jSf6Z2BR2">n_colors</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> PaletteCompareLuma</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> result</span><span class="jSf9DH-K2">;
}

</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> main</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> argc</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">char</span><span class="jSfoF-_93">**</span><span class="jSf6Z2BR2">argv</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    FILE</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> fp </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> fopen</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">argv</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2"> </span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">rb</span><span class="jSfMt2g81">"</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    gdImagePtr srcim </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageCreateFromPng</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    fclose</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;

</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> w </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageSX</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> h </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageSY</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    gdImagePtr im </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageCreate</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">w</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> h</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> c</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> c</span><span class="jSfoF-_93">&lt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">c</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">    </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> r </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> g </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> b </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        gdImageColorAllocate</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">im</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        luma</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> r</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> g</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> b</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">114</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">  </span><span class="jSf-8GPi2">#pragma omp parallel for
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> y</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> y</span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2">h</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">y</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> x</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> x</span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2">w</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">x</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> color </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageGetTrueColorPixel</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> x</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> y</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> map_value </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> map</span><span class="jSf9DH-K2">[</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">x </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">7</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">((</span><span class="jSf6Z2BR2">y </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">7</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&lt;&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">3</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">            MixingPlan plan </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> DeviseBestMixingPlan</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            map_value </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> map_value </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> MixingPlan</span><span class="jSfJiEpd3">::</span><span class="jSf6Z2BR2">n_colors </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">64</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            gdImageSetPixel</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">im</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> x</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">y</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> plan</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2"> map_value </span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">    fp </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> fopen</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">argv</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2"> </span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">wb</span><span class="jSfMt2g81">"</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    gdImagePng</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">im</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> fp</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    fclose</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> gdImageDestroy</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">im</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> gdImageDestroy</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
}</span></pre>
Here is what this program produces.<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither10.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenedither10.png" class="embedleft" alt="left"></a>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither6.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenedither6.png" class="embedleft" alt="left"></a>
Right: Image produced by the tri-tone dither of the previous chapter.<br>
Left: Image produced with the C++ program above. One may immediately observe
that it is better in almost all aspects. For example, the colors in the skirt,
and the smooth gradients in the window and in the hanging curtain, look much
better now. There are a few more scattered red pixels in this image that look
like noise, but arguably, those are <em>exactly what there should be</em>
(the original always has red details at those locations).
One thing that still theoretically improves the result is <em>gamma correction</em>,
which is a core concept in high quality dithering.
<br clear="all">
<h4><a name="GammaCorrection"></a>Gamma correction</h4><div class="deeper">
The principle and rationale for gamma correction is explained in a later chapter.
<p><a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither10-gamma_rgb.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenedither10-gamma_rgb.png" class="embedleft" alt="left"></a>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scene.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scene.png" class="embedleft" alt="left"></a>
Right: Original picture.<br>
Left: Gamma correction added. It definitely changed the picture.
It is now somewhat greener. The previous one was maybe too blue.
Mathematically this is the better picture, and the eye seems to
somewhat agree.<br clear="all">
</p><p>C++ source code for the version with gamma correction:
</p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSfAdB3O2">#include &lt;gd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;algorithm&gt; </span><span class="jSfQHvUD">/* For std::sort() */
</span><span class="jSfAdB3O2">#include &lt;vector&gt;
#include &lt;map&gt;       </span><span class="jSfQHvUD">/* For associative container, std::map&lt;&gt; */

</span><span class="jSfAdB3O2">#define COMPARE_RGB 1

</span><span class="jSfTJArG3">/* 8x8 threshold map */
</span><span class="jSf4ooiC1">static</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">char</span><span class="jSf6Z2BR2"> </span><span class="jSfTvV9Y2">map</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">8</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">8</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">     </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">48</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">12</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">60</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">51</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">15</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">63</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfA8tmj1">32</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">16</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">44</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">28</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">35</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">19</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">47</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">31</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">     </span><span class="jSfA8tmj1">8</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">56</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">4</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">52</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">11</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">59</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">7</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">55</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfA8tmj1">40</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">24</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">36</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">20</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">43</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">27</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">39</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">23</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">     </span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">50</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">14</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">62</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">49</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">13</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">61</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfA8tmj1">34</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">18</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">46</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">30</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">33</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">17</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">45</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">29</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfA8tmj1">10</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">58</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">6</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">54</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">9</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">57</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">5</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">53</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfA8tmj1">42</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">26</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">38</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">22</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">41</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">25</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">37</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">21</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">};

</span><span class="jSf4ooiC1">static</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> Gamma </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">2.2</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">// Gamma correction we use.

</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> GammaCorrect</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> v</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2">   </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> pow</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">v</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Gamma</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2">       </span><span class="jSfqHLeV2">}
</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> GammaUncorrect</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> v</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> pow</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">v</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> Gamma</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}

</span><span class="jSfTJArG3">/* CIE C illuminant */
</span><span class="jSf4ooiC1">static</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> illum</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">3</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=
</span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.488718</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.176204</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.000000</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">  </span><span class="jSfA8tmj1">0.310680</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.812985</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.0102048</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">  </span><span class="jSfA8tmj1">0.200602</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.0108109</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.989795</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">};
</span><span class="jSf4ooiC1">struct</span><span class="jSf6Z2BR2"> LabItem </span><span class="jSfTJArG3">// CIE L*a*b* color value with C and h added.
</span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> L</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">a</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">b</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">C</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">h</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">    LabItem</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    LabItem</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> R</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> G</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> B</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> Set</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">R</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">G</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">B</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">void</span><span class="jSf6Z2BR2"> Set</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> R</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> G</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> B</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">double</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> i </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> illum</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> X </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">R </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">G </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">6</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">B</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> x </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> X </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> Y </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">R </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">4</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">G </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">7</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">B</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> y </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Y </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">4</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">5</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> Z </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">R </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">5</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">G </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">8</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">B</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> z </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Z </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">6</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">7</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> i</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">8</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> threshold1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">6</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">6</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">6.0</span><span class="jSfVQfQP2">)/(</span><span class="jSfA8tmj1">29</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">29</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">29.0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> threshold2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">29</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">29.0</span><span class="jSfVQfQP2">)/(</span><span class="jSfA8tmj1">6</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">6</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">3.0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> x1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">x </span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> threshold1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">?</span><span class="jSf6Z2BR2"> pow</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">x</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1.0</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">3.0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">threshold2</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">x</span><span class="jSfVQfQP2">)+(</span><span class="jSfA8tmj1">4</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">29.0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> y1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">y </span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> threshold1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">?</span><span class="jSf6Z2BR2"> pow</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">y</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1.0</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">3.0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">threshold2</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">y</span><span class="jSfVQfQP2">)+(</span><span class="jSfA8tmj1">4</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">29.0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> z1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">z </span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> threshold1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">?</span><span class="jSf6Z2BR2"> pow</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">z</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1.0</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">3.0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">threshold2</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">z</span><span class="jSfVQfQP2">)+(</span><span class="jSfA8tmj1">4</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">29.0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        L </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">29</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">4</span><span class="jSfVQfQP2">)*</span><span class="jSf6Z2BR2">y1 </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">4</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">4</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        a </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">500</span><span class="jSfVQfQP2">*(</span><span class="jSf6Z2BR2">x1</span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">y1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        b </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">200</span><span class="jSfVQfQP2">*(</span><span class="jSf6Z2BR2">y1</span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">z1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        C </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> sqrt</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">a</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">a </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        h </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> atan2</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">b</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> a</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    LabItem</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> rgb</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> Set</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">rgb</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">void</span><span class="jSf6Z2BR2"> Set</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> rgb</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        Set</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">rgb</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">16</span><span class="jSfVQfQP2">)/</span><span class="jSfA8tmj1">255.0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">rgb</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">8</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfVQfQP2">)/</span><span class="jSfA8tmj1">255.0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">rgb</span><span class="jSfVQfQP2">&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfVQfQP2">)/</span><span class="jSfA8tmj1">255.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}
};

</span><span class="jSfTJArG3">/* From the paper "The CIEDE2000 Color-Difference Formula: Implementation Notes, */
/* Supplementary Test Data, and Mathematical Observations", by */
/* Gaurav Sharma, Wencheng Wu and Edul N. Dalal, */
/* Color Res. Appl., vol. 30, no. 1, pp. 21-30, Feb. 2005. */
/* Return the CIEDE2000 Delta E color difference measure squared, for two Lab values */
</span><span class="jSf4ooiC1">static</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> LabItem</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> lab1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> LabItem</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> lab2</span><span class="jSfVQfQP2">)
</span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSfAdB3O2">#define RAD2DEG(xx) (180.0/M_PI * (xx))
</span><span class="jSf6Z2BR2">    </span><span class="jSfAdB3O2">#define DEG2RAD(xx) (M_PI/180.0 * (xx))
</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">/* Compute Cromanance and Hue angles */
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> C1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">C2</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> h1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">h2</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> Cab </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.5</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">lab1</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">C </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> lab2</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">C</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> Cab7 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> pow</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">Cab</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">7.0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> G </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.5</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">1.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> sqrt</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">Cab7</span><span class="jSfVQfQP2">/(</span><span class="jSf6Z2BR2">Cab7 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">6103515625.0</span><span class="jSfVQfQP2">)))</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> a1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">1.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> G</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> lab1</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">a</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> a2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">1.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> G</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> lab2</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">a</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        C1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> sqrt</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">a1 </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> a1 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> lab1</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">b </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> lab1</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        C2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> sqrt</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">a2 </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> a2 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> lab2</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">b </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> lab2</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">C1 </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1e-9</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">            h1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            h1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> RAD2DEG</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">atan2</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">lab1</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">b</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> a1</span><span class="jSfVQfQP2">))</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">h1 </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.0</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                h1 </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">360.0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">C2 </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1e-9</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">            h2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            h2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> RAD2DEG</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">atan2</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">lab2</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">b</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> a2</span><span class="jSfVQfQP2">))</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">h2 </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.0</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                h2 </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">360.0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">/* Compute delta L, C and H */
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> dL </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> lab2</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">L </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> lab1</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">L</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> dC </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> C2 </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> C1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> dH</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> dh</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">C1 </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1e-9</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">||</span><span class="jSf6Z2BR2"> C2 </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1e-9</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            dh </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            dh </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> h2 </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> h1</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">/**/</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">dh </span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">180.0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2">  dh </span><span class="jSfLoabn2">-=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">360.0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">dh </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">-</span><span class="jSfA8tmj1">180.0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> dh </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">360.0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">        dH </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">2.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> sqrt</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">C1 </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> C2</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> sin</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">DEG2RAD</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">0.5</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> dh</span><span class="jSfVQfQP2">))</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> h</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> L </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.5</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">lab1</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">L  </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> lab2</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">L</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> C </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.5</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">C1 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> C2</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">C1 </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1e-9</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">||</span><span class="jSf6Z2BR2"> C2 </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1e-9</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        h </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> h1 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> h2</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        h </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> h1 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> h2</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">fabs</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">h1 </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> h2</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">180.0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">/**/</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">h </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">360.0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2">  h </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">360.0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">h </span><span class="jSfVQfQP2">&gt;=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">360.0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> h </span><span class="jSfLoabn2">-=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">360.0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">        h </span><span class="jSfLoabn2">*=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.5</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> T </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1.0
</span><span class="jSf6Z2BR2">      </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.17</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> cos</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">DEG2RAD</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">h </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">30.0</span><span class="jSfVQfQP2">))
</span><span class="jSf6Z2BR2">      </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.24</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> cos</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">DEG2RAD</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">2.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> h</span><span class="jSfVQfQP2">))
</span><span class="jSf6Z2BR2">      </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.32</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> cos</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">DEG2RAD</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">3.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> h </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">6.0</span><span class="jSfVQfQP2">))
</span><span class="jSf6Z2BR2">      </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.2</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> cos</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">DEG2RAD</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">4.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> h </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">63.0</span><span class="jSfVQfQP2">))</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> hh </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">h </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">275.0</span><span class="jSfVQfQP2">)/</span><span class="jSfA8tmj1">25.0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> ddeg </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">30.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> exp</span><span class="jSfVQfQP2">(-</span><span class="jSf6Z2BR2">hh </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> hh</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> C7 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> pow</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">C</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">7.0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> RC </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">2.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> sqrt</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">C7</span><span class="jSfVQfQP2">/(</span><span class="jSf6Z2BR2">C7 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">6103515625.0</span><span class="jSfVQfQP2">))</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> L50sq </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">L </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">50.0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">L </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">50.0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> SL </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">0.015</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> L50sq</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> sqrt</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">20.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> L50sq</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> SC </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.045</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> C</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> SH </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.015</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> C </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> T</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> RT </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">sin</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">DEG2RAD</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">2</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> ddeg</span><span class="jSfVQfQP2">))</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> RC</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> dLsq </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> dL</span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2">SL</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> dCsq </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> dC</span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2">SC</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> dHsq </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> dH</span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2">SH</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> dLsq</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">dLsq </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> dCsq</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">dCsq </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> dHsq</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">dHsq </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> RT</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">dCsq</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">dHsq</span><span class="jSfqHLeV2">;
</span><span class="jSfAdB3O2">#undef RAD2DEG
#undef DEG2RAD
</span><span class="jSfqHLeV2">}

</span><span class="jSf4ooiC1">static</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> r1</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> g1</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> b1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> r2</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> g2</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> b2</span><span class="jSfVQfQP2">)
</span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> luma1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">r1</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> g1</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> b1</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">114</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">255.0</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">1000</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> luma2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">r2</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> g2</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> b2</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">114</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">255.0</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">1000</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> lumadiff </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> luma1</span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">luma2</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> diffR </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">r1</span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">r2</span><span class="jSfVQfQP2">)/</span><span class="jSfA8tmj1">255.0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> diffG </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">g1</span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">g2</span><span class="jSfVQfQP2">)/</span><span class="jSfA8tmj1">255.0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> diffB </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">b1</span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">b2</span><span class="jSfVQfQP2">)/</span><span class="jSfA8tmj1">255.0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">diffR</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">diffR</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">0.299</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> diffG</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">diffG</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">0.587</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> diffB</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">diffB</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">0.114</span><span class="jSfVQfQP2">)*</span><span class="jSfA8tmj1">0.75
</span><span class="jSf6Z2BR2">         </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> lumadiff</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">lumadiff</span><span class="jSfqHLeV2">;
}


</span><span class="jSfTJArG3">/* Palette */
</span><span class="jSf4ooiC1">static</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> palettesize </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">16</span><span class="jSfqHLeV2">;
</span><span class="jSf4ooiC1">static</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> pal</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">palettesize</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=
</span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0x080000</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0x201A0B</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0x432817</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0x492910</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0x234309</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0x5D4F1E</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0x9C6B20</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0xA9220F</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">  </span><span class="jSfA8tmj1">0x2B347C</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0x2B7409</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0xD0CA40</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0xE8A077</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0x6A94AB</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0xD5C4B3</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0xFCE76E</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0xFCFAE2</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">};

</span><span class="jSfTJArG3">/* Luminance for each palette entry, to be initialized as soon as the program begins */
</span><span class="jSf4ooiC1">static</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> luma</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">palettesize</span><span class="jSfqHLeV2">];
</span><span class="jSf4ooiC1">static</span><span class="jSf6Z2BR2"> LabItem  meta</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">palettesize</span><span class="jSfqHLeV2">];
</span><span class="jSf4ooiC1">static</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2">   pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">palettesize</span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">];</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">// Gamma-corrected palette entry

</span><span class="jSf4ooiC1">inline</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">bool</span><span class="jSf6Z2BR2"> PaletteCompareLuma</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> index1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> index2</span><span class="jSfVQfQP2">)
</span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> luma</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">index1</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> luma</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">index2</span><span class="jSfqHLeV2">];
}

</span><span class="jSf4ooiC1">typedef</span><span class="jSf6Z2BR2"> </span><span class="jSfTvV9Y2">std</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">vector</span><span class="jSfVQfQP2">&lt;</span><span class="jSf4ooiC1">unsigned</span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> MixingPlan</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">MixingPlan DeviseBestMixingPlan</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> color</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> size_t limit</span><span class="jSfVQfQP2">)
</span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// Input color in RGB
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> input_rgb</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">color</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">16</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">                         </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">color</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">8</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">                         </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">color</span><span class="jSfVQfQP2">&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">};

</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// Input color in CIE L*a*b*
</span><span class="jSf6Z2BR2">    LabItem input</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">color</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// Tally so far (gamma-corrected)
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> so_far</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">};

</span><span class="jSf6Z2BR2">    MixingPlan result</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">while</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">size</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> limit</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> chosen_amount </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> chosen        </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> max_test_count </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">empty</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">?</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">size</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> least_penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">-</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> index</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> index</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">palettesize</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">index</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> color </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">index</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> sum</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> so_far</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2"> so_far</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2"> so_far</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">};
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> add</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">index</span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2"> pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">index</span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2"> pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">index</span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">};

</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> p</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> p</span><span class="jSfVQfQP2">&lt;=</span><span class="jSf6Z2BR2">max_test_count</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> p</span><span class="jSfLoabn2">*=</span><span class="jSfA8tmj1">2</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> c</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> c</span><span class="jSfVQfQP2">&lt;</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">c</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> sum</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> add</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> c</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> c</span><span class="jSfVQfQP2">&lt;</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">c</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> add</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> add</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">                </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> t </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">size</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> p</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">                </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> test</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> GammaUncorrect</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">sum</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2">t</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">                                   GammaUncorrect</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">sum</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2">t</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">                                   GammaUncorrect</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">sum</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2">t</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">};
</span><span class="jSf6Z2BR2">                           
</span><span class="jSfAdB3O2">#if COMPARE_RGB
</span><span class="jSf6Z2BR2">                </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfVQfQP2">(
</span><span class="jSf6Z2BR2">                    input_rgb</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2">input_rgb</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2">input_rgb</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">],
</span><span class="jSf6Z2BR2">                    test</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">255</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> test</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">255</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> test</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">255</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSfAdB3O2">#else
</span><span class="jSf6Z2BR2">                LabItem test_lab</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> test</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2"> test</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2"> test</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">test_lab</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> input</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSfAdB3O2">#endif
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">penalty </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> least_penalty </span><span class="jSfVQfQP2">||</span><span class="jSf6Z2BR2"> least_penalty </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                    least_penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> penalty</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                    chosen        </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> index</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                    chosen_amount </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> p</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">        </span><span class="jSfTJArG3">// Append "chosen_amount" times "chosen" to the color list
</span><span class="jSf6Z2BR2">        result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">resize</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">size</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> chosen_amount</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> chosen</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> c</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> c</span><span class="jSfVQfQP2">&lt;</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">c</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">            so_far</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">chosen</span><span class="jSfqHLeV2">][</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> chosen_amount</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// Sort the colors according to luminance
</span><span class="jSf6Z2BR2">    </span><span class="jSfTvV9Y2">std</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">sort</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">begin</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">end</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> PaletteCompareLuma</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> result</span><span class="jSfqHLeV2">;
}

</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> main</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> argc</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">char</span><span class="jSfVQfQP2">**</span><span class="jSf6Z2BR2">argv</span><span class="jSfVQfQP2">)
</span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">    FILE</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> fp </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> fopen</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">argv</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2"> </span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">rb</span><span class="jSfMt2g81">"</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    gdImagePtr srcim </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> gdImageCreateFromPng</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    fclose</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> w </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> gdImageSX</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> h </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> gdImageSY</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    gdImagePtr im </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> gdImageCreate</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">w</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> h</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> c</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> c</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">palettesize</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">c</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> r </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">16</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> g </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">pal</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">8</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0xFF</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> b </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0xFF</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        gdImageColorAllocate</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">im</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> r</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">g</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        luma</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> r</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> g</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">114</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        meta</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Set</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">pal</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> GammaCorrect</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">r</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">255.0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> GammaCorrect</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">g</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">255.0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">c</span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> GammaCorrect</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">255.0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">  </span><span class="jSfAdB3O2">#pragma omp parallel for
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> y</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> y</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">h</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">y</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> x</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> x</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">w</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">x</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> color </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> gdImageGetTrueColorPixel</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> x</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> y</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> map_value </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfTvV9Y2">map</span><span class="jSfqHLeV2">[</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">x </span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">7</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">y </span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">7</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">3</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">            MixingPlan plan </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> DeviseBestMixingPlan</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">color</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">16</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            map_value </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> map_value </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> plan</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">size</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">64</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            gdImageSetPixel</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">im</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> x</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">y</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> plan</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2"> map_value </span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    fp </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> fopen</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">argv</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2"> </span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">wb</span><span class="jSfMt2g81">"</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    gdImagePng</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">im</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> fp</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    fclose</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> gdImageDestroy</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">im</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> gdImageDestroy</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
}</span></pre>
An attentive reader may also notice that the code has CIEDE2000 comparisons
written, though disabled. That's because it did not go as well as anticipated.
Below is the result of the same program with the <tt>COMPARE_RGB</tt> hack disabled.
<p><a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither10-gamma.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenedither10-gamma.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither10-gamma.png"></a>
</p><p>So, yeah. CIE works better for some pictures than for others. Even a mere
euclidean CIE76 ΔE brought forth the yellow scattered pixels.
Disclaimer: I'm new to the CIE colorspace. I may have a fundamental
misunderstanding or two somewhere.
</p></div></div><h3><a name="YliluomaSOrderedDitheringAlgorithm 3"></a>Yliluoma's ordered dithering algorithm 3</h3><div class="deeper">
Algorithm 3 is a variant to algorithm 2. It uses an array of color candidates
per pixel, and it has gamma based mixing rules and CIE color evalations in its core.
However, it is more thorough on its algorithm of devising the array of
color candidates.
<p>In this algorithm, the color candidate array is first preinitialized with
the single closest-resembling palette index to the input color. Then, it
is iteratively subdivided by finding whether one of the palette indices
can be <em>replaced</em> with two other palette indices in equal proportion,
that would produce a better substitute for the original single palette index.
</p><p>Here is how this algorithm can be described in pseudo code:
</p><p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf6Z2BR2">  For each pixel</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Input</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> in the original picture</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">    Mapping</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">clear</span><span class="jSfVQfQP2">()
</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// ^ An associative array, key:palette index, value:count

</span><span class="jSf6Z2BR2">    Color</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">CurrentPenalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> FindClosestColorFrom</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">Palette</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Input</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// ^ The palette index that closest resembles Input
</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// ^ CurrentPenalty is a quantitive difference between Input and Color.

</span><span class="jSf6Z2BR2">    Mapping</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">Color</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> M

    LoopWhile CurrentPenalty </span><span class="jSfVQfQP2">&lt;&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSf6Z2BR2">   </span><span class="jSfTJArG3">// Loop until we've got a perfect match.
</span><span class="jSf6Z2BR2">      BestPenalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> CurrentPenalty
      For each </span><span class="jSfTvV9Y2">pair</span><span class="jSf6Z2BR2"> of SplitColor</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> SplitCount in Mapping</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">        Sum </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0
</span><span class="jSf6Z2BR2">        For each </span><span class="jSfTvV9Y2">pair</span><span class="jSf6Z2BR2"> of OtherColor</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> OtherCount in Mapping</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">          If OtherColor </span><span class="jSfVQfQP2">&lt;&gt;</span><span class="jSf6Z2BR2"> SplitColor</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Then Sum </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Sum </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> OtherColor </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> OtherCount
        EndFor
        Portion1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> SplitCount </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">2</span><span class="jSf6Z2BR2">        </span><span class="jSfTJArG3">// Equal portion 1
</span><span class="jSf6Z2BR2">        Portion2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> SplitCount </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> Portion1 </span><span class="jSfTJArG3">// Equal portion 2
</span><span class="jSf6Z2BR2">        For each viable two</span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">color combination</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">              Index1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">Color1 and Index</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">Color2</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">            in Palette</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">          Test </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">Sum </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> Color1 </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> Portion1 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> Color2 </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> Portion2</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">M</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">          TestPenalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> CompareColors</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">Input</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Test</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">          If TestPenalty </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> BestPenalty</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Then</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">            BestPenalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> TestPenalty
            BestSplitData </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> SplitColor</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Color1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Color2 </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">          EndIf
        EndFor
      EndFor
      If BestPenalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> CurrentPenalty</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Then Exit Loop</span><span class="jSfVQfQP2">.
</span><span class="jSf6Z2BR2">      </span><span class="jSfTJArG3">// ^ Break loop if we cannot improve the result anymore.
</span><span class="jSf6Z2BR2">      SplitCount </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Mapping</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">BestSplitData</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">SplitColor</span><span class="jSfqHLeV2">]
</span><span class="jSf6Z2BR2">      Portion1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> SplitCount </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">2</span><span class="jSf6Z2BR2">        </span><span class="jSfTJArG3">// Equal portion 1
</span><span class="jSf6Z2BR2">      Portion2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> SplitCount </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> Portion1 </span><span class="jSfTJArG3">// Equal portion 2
</span><span class="jSf6Z2BR2">      Mapping</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Erase</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">BestSplitData</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">SplitColor</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">      If Portion1 </span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Then Mapping</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">BestSplitData</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Color1</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> Portion1
      If Portion2 </span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Then Mapping</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">BestSplitData</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Color2</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> Portion2
      CurrentPenalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> BestPenalty
    EndLoop

    CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Clear</span><span class="jSfVQfQP2">()
</span><span class="jSf6Z2BR2">    For each </span><span class="jSfTvV9Y2">pair</span><span class="jSf6Z2BR2"> of Candidate</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Count in Mapping</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">      CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Add</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">Candidate</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Count </span><span class="jSfTvV9Y2">times</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    EndFor
    CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Sort</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> by</span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> luminance </span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    Index </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> ThresholdMatrix</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">xcoordinate </span><span class="jSfVQfQP2">%</span><span class="jSf6Z2BR2"> X</span><span class="jSfqHLeV2">][</span><span class="jSf6Z2BR2">ycoordinate </span><span class="jSfVQfQP2">%</span><span class="jSf6Z2BR2"> Y</span><span class="jSfqHLeV2">]
</span><span class="jSf6Z2BR2">    Draw pixel </span><span class="jSfWtbTI">using</span><span class="jSf6Z2BR2"> CandidateList</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">Index </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Size</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">X</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">Y</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">]
</span><span class="jSf6Z2BR2">  EndFor</span></pre>
It is slow, but very thorough. It can be made to utilize psychovisual analysis
by precalculating all two-color combinations from the palette and only saving
those that don't look too odd when combined. Such as, only saving those pairs
where their luma (luminance) does not differ more, than the average luma
difference between two successive items in the luma-sorted array, scaled
by a sufficient factor.
<p>Using a matrix of size 8x8, M of 4, gamma of 2.2, the CIEDE2000 color
comparison algorithm, and a luminance difference threshold of 500% of
the average, we get the following picture:
</p><p><a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither11-gamma.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenedither11-gamma.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither11-gamma.png"></a>
</p><p>C++ source code that implements this algorithm is listed below.
Since most of the program is the same as in algorithm 2, we will
only include the modified part, which is the <tt>DeviseBestMixingPlan</tt> function):
</p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf6Z2BR2">MixingPlan DeviseBestMixingPlan</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> color</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> size_t limit</span><span class="jSfVQfQP2">)
</span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// Input color in RGB
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> input_rgb</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">color</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">16</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">                         </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">color</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">8</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">                         </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">color</span><span class="jSfVQfQP2">&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">};
</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// Input color in CIE L*a*b*
</span><span class="jSf6Z2BR2">    LabItem input</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">color</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">    </span><span class="jSfTvV9Y2">std</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">map</span><span class="jSfVQfQP2">&lt;</span><span class="jSf4ooiC1">unsigned</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> Solution</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// The penalty of our currently "best" solution.
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> current_penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">-</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// First, find the closest color to the input color.
</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// It is our seed.
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">1</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> chosen </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> index</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> index</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">palettesize</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">index</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> color </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">index</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">    </span><span class="jSfAdB3O2">#if COMPARE_RGB
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> r </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> color</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">16</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> g </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">color</span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSfA8tmj1">8</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> b </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> color</span><span class="jSfVQfQP2">&amp;</span><span class="jSfA8tmj1">0xFF</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfVQfQP2">(
</span><span class="jSf6Z2BR2">                input_rgb</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2">input_rgb</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2">input_rgb</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">],
</span><span class="jSf6Z2BR2">                r</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">g</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfAdB3O2">#else
</span><span class="jSf6Z2BR2">            LabItem test_lab</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">color</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">input</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> test_lab</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfAdB3O2">#endif
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">penalty </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> current_penalty </span><span class="jSfVQfQP2">||</span><span class="jSf6Z2BR2"> current_penalty </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> current_penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> penalty</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> chosen </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> index</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">        Solution</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">chosen</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> limit</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> dbllimit </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1.0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> limit</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">while</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">current_penalty </span><span class="jSfVQfQP2">!=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.0</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSfTJArG3">// Find out if there is a region in Solution that
</span><span class="jSf6Z2BR2">        </span><span class="jSfTJArG3">// can be split in two for benefit.
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2">   best_penalty      </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> current_penalty</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> best_splitfrom    </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">~</span><span class="jSfA8tmj1">0</span><span class="jSfbTm1T2">u</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> best_split_to</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2">  </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">};

</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSfTvV9Y2">std</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">map</span><span class="jSfVQfQP2">&lt;</span><span class="jSf4ooiC1">unsigned</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">unsigned</span><span class="jSfVQfQP2">&gt;</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">iterator
</span><span class="jSf6Z2BR2">            i </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Solution</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">begin</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            i </span><span class="jSfVQfQP2">!=</span><span class="jSf6Z2BR2"> Solution</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">end</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">i</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">//if(i-&gt;second &lt;= 1) continue;
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> split_color </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> i</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">first</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> split_count </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> i</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">second</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">// Tally the other colors
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> sum</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">,</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">};
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSfTvV9Y2">std</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">map</span><span class="jSfVQfQP2">&lt;</span><span class="jSf4ooiC1">unsigned</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">unsigned</span><span class="jSfVQfQP2">&gt;</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">iterator
</span><span class="jSf6Z2BR2">                j </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Solution</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">begin</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                j </span><span class="jSfVQfQP2">!=</span><span class="jSf6Z2BR2"> Solution</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">end</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">j</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">j</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">first </span><span class="jSfVQfQP2">==</span><span class="jSf6Z2BR2"> split_color</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">continue</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                sum</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2"> j</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">first </span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> j</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">second </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> dbllimit</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                sum</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2"> j</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">first </span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> j</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">second </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> dbllimit</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                sum</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2"> j</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">first </span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> j</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">second </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> dbllimit</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> portion1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">split_count </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">2</span><span class="jSf6Z2BR2">            </span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> dbllimit</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> portion2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">split_count </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> split_count</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">2</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> dbllimit</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> a</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> a</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">palettesize</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">a</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                </span><span class="jSfTJArG3">//if(a != split_color &amp;&amp; Solution.find(a) != Solution.end()) continue;
</span><span class="jSf6Z2BR2">                </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> firstb </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">portion1 </span><span class="jSfVQfQP2">==</span><span class="jSf6Z2BR2"> portion2</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> firstb </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> a</span><span class="jSfVQfQP2">+</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> b</span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2">firstb</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">palettesize</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                    </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">a </span><span class="jSfVQfQP2">==</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">continue</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                    </span><span class="jSfTJArG3">//if(b != split_color &amp;&amp; Solution.find(b) != Solution.end()) continue;
</span><span class="jSf6Z2BR2">                    </span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> lumadiff </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">int</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">luma</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">a</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">int</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">luma</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">b</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                    </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">lumadiff </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> lumadiff </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">lumadiff</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                    </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">lumadiff </span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">80000</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">continue</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">                    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> test</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=
</span><span class="jSf6Z2BR2">                        </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> GammaUncorrect</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">sum</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">a</span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> portion1 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">b</span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> portion2</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">                          GammaUncorrect</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">sum</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">a</span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> portion1 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">b</span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> portion2</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">                          GammaUncorrect</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">sum</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">a</span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> portion1 </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> pal_g</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">b</span><span class="jSfqHLeV2">][</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> portion2</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">};
</span><span class="jSf6Z2BR2">                    </span><span class="jSfTJArG3">// Figure out if this split is better than what we had
</span><span class="jSfAdB3O2">#if COMPARE_RGB
</span><span class="jSf6Z2BR2">                    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfVQfQP2">(
</span><span class="jSf6Z2BR2">                        input_rgb</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2">input_rgb</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2">input_rgb</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">],
</span><span class="jSf6Z2BR2">                        test</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">255</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> test</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">255</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> test</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">*</span><span class="jSfA8tmj1">255</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSfAdB3O2">#else
</span><span class="jSf6Z2BR2">                    LabItem test_lab</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> test</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2"> test</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">],</span><span class="jSf6Z2BR2"> test</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                    </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">input</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> test_lab</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSfAdB3O2">#endif
</span><span class="jSf6Z2BR2">                    </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">penalty </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> best_penalty</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                        best_penalty   </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> penalty</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                        best_splitfrom </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> split_color</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                        best_split_to</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> a</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                        best_split_to</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> b</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                    </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">                    </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">portion2 </span><span class="jSfVQfQP2">==</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">break</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}</span><span class="jSf6Z2BR2">   </span><span class="jSfqHLeV2">}</span><span class="jSf6Z2BR2">   </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">best_penalty </span><span class="jSfVQfQP2">==</span><span class="jSf6Z2BR2"> current_penalty</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">break</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">// No better solution was found.

</span><span class="jSf6Z2BR2">        </span><span class="jSfTvV9Y2">std</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">map</span><span class="jSfVQfQP2">&lt;</span><span class="jSf4ooiC1">unsigned</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">unsigned</span><span class="jSfVQfQP2">&gt;</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">iterator</span><span class="jSf6Z2BR2"> i </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Solution</span><span class="jSfVQfQP2">.</span><span class="jSfTvV9Y2">find</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">best_splitfrom</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> split_count </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> i</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">second</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> split1 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> split_count</span><span class="jSfVQfQP2">/</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> split2 </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> split_count</span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2">split1</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        Solution</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">erase</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">i</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">split1 </span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> Solution</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">best_split_to</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> split1</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">split2 </span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> Solution</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">best_split_to</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> split2</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        current_penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> best_penalty</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// Sequence the solution.
</span><span class="jSf6Z2BR2">    MixingPlan result</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSfTvV9Y2">std</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">map</span><span class="jSfVQfQP2">&lt;</span><span class="jSf4ooiC1">unsigned</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">unsigned</span><span class="jSfVQfQP2">&gt;</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">iterator
</span><span class="jSf6Z2BR2">        i </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Solution</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">begin</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> i </span><span class="jSfVQfQP2">!=</span><span class="jSf6Z2BR2"> Solution</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">end</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">i</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">resize</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">size</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> i</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">second</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> i</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">first</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// Sort the colors according to luminance
</span><span class="jSf6Z2BR2">    </span><span class="jSfTvV9Y2">std</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">sort</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">begin</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">end</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> PaletteCompareLuma</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> result</span><span class="jSfqHLeV2">;
}</span></pre>
</div><h3><a name="ImprovementToYliluomaSAlgorithm 1"></a>Improvement to Yliluoma's algorithm 1</h3><div class="deeper">
After reviewing the ideas in algorithms 2 and 3, the algorithm 1 can
be improved significantly by precalculating all the combinations of
1…M colors, and simply finding the best matching color from
that list and using that mix as the array of candidates.
<p>The precalculated array can also be gamma corrected in advance,
and the component list of each combination sorted by luminance in advance.
</p><p>The algorithm thus becomes:
</p><p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf6Z2BR2">  For each pixel</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Input</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> in the original picture</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">    SmallestPenalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">10</span><span class="jSfVQfQP2">^</span><span class="jSfA8tmj1">99</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">/* Impossibly large number */
</span><span class="jSf6Z2BR2">    CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">clear</span><span class="jSfVQfQP2">()
</span><span class="jSf6Z2BR2">    For each combination</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Mixed</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> in the precalculated </span><span class="jSfTvV9Y2">list</span><span class="jSf6Z2BR2"> of combinations</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">      Penalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Evaluate the difference of Input and Mixed</span><span class="jSfVQfQP2">.
</span><span class="jSf6Z2BR2">      If Penalty </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> SmallestPenalty</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">        SmallestPenalty </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Penalty
        CandidateList   </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Mixed</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">components
      EndIf
    EndFor
    Index </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> ThresholdMatrix</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">xcoordinate </span><span class="jSfVQfQP2">%</span><span class="jSf6Z2BR2"> X</span><span class="jSfqHLeV2">][</span><span class="jSf6Z2BR2">ycoordinate </span><span class="jSfVQfQP2">%</span><span class="jSf6Z2BR2"> Y</span><span class="jSfqHLeV2">]
</span><span class="jSf6Z2BR2">    Draw pixel </span><span class="jSfWtbTI">using</span><span class="jSf6Z2BR2"> CandidateList</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">Index </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Size</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">/</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">X</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">Y</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">]
</span><span class="jSf6Z2BR2">  EndFor</span></pre>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither12-gamma.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenedither12-gamma.png" class="embedleft" alt="left"></a>
Left: Running this algorithm with gamma level 2.2 and color comparison
operator CIE2000, with 8x8 matrix and 8 components at maximum (all unique),
we get this following picture. (7258 combinations.)
<p>The combination list was formed from all unique combinations of 1…8 slots
from the palette where the difference of the luminance of the brightest
and dimmest elements in the mix is less than 276% of the maximum difference
between the luminance of successive items in the palette.<br>
Better psychovisual quality might be achieved by comparing the chroma as well.<br clear="all">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scenedither12-gamma2.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scenedither12-gamma2.png" class="embedleft" alt="left"></a>
Left: The same, with all combinations that have max. 2 unique
elements and max. 4 elements in total (4796 combinations).
</p><p>Creating the list of combinations is fast for small palettes (1..16), but
on larger palettes (say, 256 colors), you might want to restrict the parameters
(M, luminance threshold) lest the list become millions of combinations long.
Though if you use a simple euclidean distance in either RGB or L*a*b* colorspaces,
using a kd-tree for the search will still preserve quickness of the algorithm.<br clear="all">
</p></div></div><h2><a name="StateOfArtAvailableInCurrentSoftwareComparison"></a>State of art available in current software (comparison)</h2><div class="deeper">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scene_photoshop.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scene_photoshop.png" class="embedleft" alt="left"></a>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scene_gimp.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scene_gimp.png" class="embedright" alt="right"></a>
Left: Adobe Photoshop CS4's take on this same challenge.
It uses “Pattern Dithering” invented by Thomas Knoll.
It is very good, and faster than any of my algorithms
(though #2 has a better minimal time and
the improved #1 can be faster, if the combination list is short).
It does not appear to use gamma correction.
A description of how the algorithm works is included later in this article.<br> <br>
Right: Gimp 2.6's take on this same challenge.
<p>I also tried Paintshop Pro, but I could not get it
to ordered-dither using a custom palette at all.
<br clear="all">
</p><p><a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scene_imagick.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scene_imagick.png" class="embedleft" alt="left"></a>
Left: In Imagemagick 6.6.0, ordered-dithering ignores palette completely,
for it is a thresholding filter.
You specify for it the threshold levels, and it ordered-dithers.
When applying the palette, it either uses a diffusion filter
(Floyd-Steinberg or Hilbert-Peano), or does not.
This image was created with the commandline
<tt>convert scene.png -ordered-dither o8x8,8,16,8 +dither -map scenepal.png  scene_imagick.png</tt>
and it is the best I could get from Imagemagick.
</p><p>I tried a dozen opensource image manipulation libraries, and all of those
tested that implemented an ordered dithering algorithm, produced
a) an explicitly monochrome image,
b) an image of a hardcoded, fixed palette or
c) simply thresholded the image like Imagemagick did.
From this study I have a reason to assume that Yliluoma's algorithms
described on this page are the <em>best</em> that are available as
free software at the time of this writing (early 2011).
<br clear="all">
</p><h3><a name="PatternDitheringThePatentedAlgorithmUsedInAdobePhotoshop"></a>Pattern dithering, the patented algorithm used in Adobe® Photoshop®</h3><div class="deeper">
Adobe Systems Incorporated is currently in possession of US Patent number 6606166,
applied for in 1999-30-04, granted in 2003-08-12.
It describes an algorithm called <em>pattern dithering</em> invented by Thomas Knoll.
For the sake of documentation, we will explain how that algorithm works as well.
<p>In the patented form of pattern dithering, the threshold matrix is strictly
restricted to 16 values (4x4 Bayer matrix),
although there is no reason why no other size of matrix can be used.
In this article, we will continue to use the 8x8 size so as to not infringe on the patent¹.
</p><p>In pattern dithering, the pixel mixing plan constitutes of an array of colors,
just like in Yliluoma dithering #2, where the size of the array is exactly the
same as the size of the threshold matrix.
The threshold matrix itself consists of integers rather than floats.
These integers work as indices to the color array.
</p><p>In pseudo code, the process of converting the input bitmap
into target bitmap goes like this:
</p><p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf6Z2BR2">  Threshold </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0.5</span><span class="jSf6Z2BR2">    </span><span class="jSfTJArG3">// This parameter is constant and controls the dithering.
</span><span class="jSf6Z2BR2">  </span><span class="jSfTJArG3">// 0.0 = no dithering, 1.0 = maximal dithering.
</span><span class="jSf6Z2BR2">  For each pixel</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Input</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> in the original picture</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">    Error         </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0
</span><span class="jSf6Z2BR2">    CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">clear</span><span class="jSfVQfQP2">()
</span><span class="jSf6Z2BR2">    LoopWhile CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Size </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">X </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> Y</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">      Attempt   </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Input </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> Error </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> Threshold
      Candidate </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> FindClosestColorFrom</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">Palette</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> Attempt</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">      CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Add</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">Candidate</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">      Error </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> Input </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> Candidate  </span><span class="jSfTJArG3">// The difference between these two color values.
</span><span class="jSf6Z2BR2">    LoopEnd
    CandidateList</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">Sort</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> by</span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> luminance </span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    Index </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> ThresholdMatrix</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">xcoordinate </span><span class="jSfVQfQP2">%</span><span class="jSf6Z2BR2"> X</span><span class="jSfqHLeV2">][</span><span class="jSf6Z2BR2">ycoordinate </span><span class="jSfVQfQP2">%</span><span class="jSf6Z2BR2"> Y</span><span class="jSfqHLeV2">]
</span><span class="jSf6Z2BR2">    Draw pixel </span><span class="jSfWtbTI">using</span><span class="jSf6Z2BR2"> CandidateList</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">Index</span><span class="jSfqHLeV2">]
</span><span class="jSf6Z2BR2">  EndFor</span></pre>
Finding the closest color from the palette can be done in a number of ways,
including a naive euclidean distance in RGB space,
or a ΔE comparison in CIE&nbsp;L*a*b* color space.
We will continue to use the ColorCompare function from Yliluoma dithering
version 1 to further avoid infringing on the patent¹.
<p>The complete source code is shown below.
The <tt>DeviseBestMixingPlan</tt> function runs for
N&nbsp;×&nbsp;M
iterations for a palette of size N and a dithering pattern of size M = X×Y,
complexity being O(N), and it depends on a
color comparison function, <tt>ColorCompare</tt>.
</p><p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf-8GPi2">#include &lt;gd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;algorithm&gt; </span><span class="jSfQHvUD">/* For std::sort() */

</span><span class="jSfnT6pa2">/* 8x8 threshold map (note: the patented pattern dithering algorithm uses 4x4) */
</span><span class="jSf5gZog2">static</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">char</span><span class="jSf6Z2BR2"> map</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">8</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">     </span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">48</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">12</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">60</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">51</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">15</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">63</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfJnSXl1">32</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">44</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">28</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">35</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">19</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">47</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">31</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">     </span><span class="jSfJnSXl1">8</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">56</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">4</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">52</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">11</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">59</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">7</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">55</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfJnSXl1">40</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">24</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">36</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">20</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">43</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">27</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">39</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">23</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">     </span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">50</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">14</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">62</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">49</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">13</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">61</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfJnSXl1">34</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">18</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">46</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">30</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">33</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">17</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">45</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">29</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfJnSXl1">10</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">58</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">6</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">54</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">9</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">57</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">5</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">53</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">    </span><span class="jSfJnSXl1">42</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">26</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">38</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">22</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">41</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">25</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">37</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">21</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};

</span><span class="jSfnT6pa2">/* Palette */
</span><span class="jSf5gZog2">static</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=
</span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0x080000</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x201A0B</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x432817</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x492910</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0x234309</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x5D4F1E</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x9C6B20</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xA9220F</span><span class="jSf9DH-K2">,
</span><span class="jSf6Z2BR2">  </span><span class="jSfJnSXl1">0x2B347C</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0x2B7409</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xD0CA40</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xE8A077</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0x6A94AB</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xD5C4B3</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xFCE76E</span><span class="jSf9DH-K2">,</span><span class="jSfJnSXl1">0xFCFAE2</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};

</span><span class="jSfnT6pa2">/* Luminance for each palette entry, to be initialized as soon as the program begins */
</span><span class="jSf5gZog2">static</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> luma</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">];

</span><span class="jSf5gZog2">bool</span><span class="jSf6Z2BR2"> PaletteCompareLuma</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> index1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> index2</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> luma</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">index1</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> luma</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">index2</span><span class="jSf9DH-K2">];
}
</span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r1</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g1</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b1</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> r2</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> g2</span><span class="jSf9DH-K2">,</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> b2</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> luma1 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r1</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> g1</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> b1</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">114</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">255.0</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">1000</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> luma2 </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r2</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> g2</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> b2</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">114</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">/</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSfJnSXl1">255.0</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">1000</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> lumadiff </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> luma1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">luma2</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> diffR </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">r1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">r2</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">255.0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> diffG </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">g1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">g2</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">255.0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> diffB </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">b1</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">b2</span><span class="jSfoF-_93">)/</span><span class="jSfJnSXl1">255.0</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">diffR</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">diffR</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">0.299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> diffG</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">diffG</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">0.587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> diffB</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">diffB</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">0.114</span><span class="jSfoF-_93">)*</span><span class="jSfJnSXl1">0.75
</span><span class="jSf6Z2BR2">         </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> lumadiff</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2">lumadiff</span><span class="jSf9DH-K2">;
}
</span><span class="jSf5gZog2">struct</span><span class="jSf6Z2BR2"> MixingPlan
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> colors</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">64</span><span class="jSf9DH-K2">];
};
</span><span class="jSf6Z2BR2">MixingPlan DeviseBestMixingPlan</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    MixingPlan result </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">}</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> src</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};

</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> X </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0.09</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2">  </span><span class="jSfnT6pa2">// Error multiplier
</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> e</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};</span><span class="jSf6Z2BR2"> </span><span class="jSfnT6pa2">// Error accumulator
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> c</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> c</span><span class="jSfoF-_93">&lt;</span><span class="jSfJnSXl1">64</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">c</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">    </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSfnT6pa2">// Current temporary value
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> src</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> e</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> X</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> src</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> e</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> X</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> src</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> e</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> X </span><span class="jSf9DH-K2">};
</span><span class="jSf6Z2BR2">        </span><span class="jSfnT6pa2">// Clamp it in the allowed RGB range
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">&lt;</span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">]</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">&gt;</span><span class="jSfJnSXl1">255</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">]</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">255</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">&lt;</span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">]</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">&gt;</span><span class="jSfJnSXl1">255</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">]</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">255</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">&lt;</span><span class="jSfJnSXl1">0</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">]</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">&gt;</span><span class="jSfJnSXl1">255</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">]</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">255</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfnT6pa2">// Find the closest color from the palette
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> least_penalty </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">1e99</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> chosen </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> c</span><span class="jSfoF-_93">%</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> index</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> index</span><span class="jSfoF-_93">&lt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">index</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> color </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">index</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">            </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> pc</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};
</span><span class="jSf6Z2BR2">            </span><span class="jSf5gZog2">double</span><span class="jSf6Z2BR2"> penalty </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> ColorCompare</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">pc</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2">pc</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2">pc</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2"> t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2">t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2">t</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">penalty </span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2"> least_penalty</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">                </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> least_penalty </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> penalty</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> chosen</span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2">index</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSfnT6pa2">// Add it to candidates and update the error
</span><span class="jSf6Z2BR2">        result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> chosen</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> color </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">chosen</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">const</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> pc</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">3</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">{</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> color</span><span class="jSfoF-_93">&amp;</span><span class="jSfJnSXl1">0xFF</span><span class="jSf6Z2BR2"> </span><span class="jSf9DH-K2">};
</span><span class="jSf6Z2BR2">        e</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">+=</span><span class="jSf6Z2BR2"> src</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">pc</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">        e</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">+=</span><span class="jSf6Z2BR2"> src</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">pc</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">        e</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">+=</span><span class="jSf6Z2BR2"> src</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">-</span><span class="jSf6Z2BR2">pc</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">    </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfnT6pa2">// Sort the colors according to luminance
</span><span class="jSf6Z2BR2">    std</span><span class="jSfJiEpd3">::</span><span class="jSf6Z2BR2">sort</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> result</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSfoF-_93">+</span><span class="jSfJnSXl1">64</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> PaletteCompareLuma</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> result</span><span class="jSf9DH-K2">;
}

</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> main</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">int</span><span class="jSf6Z2BR2"> argc</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf5gZog2">char</span><span class="jSfoF-_93">**</span><span class="jSf6Z2BR2">argv</span><span class="jSfoF-_93">)
</span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">    FILE</span><span class="jSfoF-_93">*</span><span class="jSf6Z2BR2"> fp </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> fopen</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">argv</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">1</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2"> </span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">rb</span><span class="jSfMt2g81">"</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    gdImagePtr srcim </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageCreateFromPng</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    fclose</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;

</span><span class="jSf6Z2BR2">    </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> w </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageSX</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> h </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageSY</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    gdImagePtr im </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageCreate</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">w</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> h</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> c</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> c</span><span class="jSfoF-_93">&lt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">c</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">    </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> r </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">16</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> g </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">&gt;&gt;</span><span class="jSfJnSXl1">8</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> b </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> pal</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">0xFF</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        gdImageColorAllocate</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">im</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> r</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">g</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">b</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        luma</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2">c</span><span class="jSf9DH-K2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> r</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">299</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> g</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">587</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> b</span><span class="jSfoF-_93">*</span><span class="jSfJnSXl1">114</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">  </span><span class="jSf-8GPi2">#pragma omp parallel for
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> y</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> y</span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2">h</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">y</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfoF-_93">(</span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> x</span><span class="jSfdoBI62">=</span><span class="jSfJnSXl1">0</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> x</span><span class="jSfoF-_93">&lt;</span><span class="jSf6Z2BR2">w</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">++</span><span class="jSf6Z2BR2">x</span><span class="jSfoF-_93">)
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> color </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> gdImageGetTrueColorPixel</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> x</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> y</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSf5gZog2">unsigned</span><span class="jSf6Z2BR2"> map_value </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> map</span><span class="jSf9DH-K2">[</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">x </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">7</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">+</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">((</span><span class="jSf6Z2BR2">y </span><span class="jSfoF-_93">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">7</span><span class="jSfoF-_93">)</span><span class="jSf6Z2BR2"> </span><span class="jSfoF-_93">&lt;&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfJnSXl1">3</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">];
</span><span class="jSf6Z2BR2">            MixingPlan plan </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> DeviseBestMixingPlan</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">color</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">            gdImageSetPixel</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">im</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> x</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2">y</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> plan</span><span class="jSfoF-_93">.</span><span class="jSf6Z2BR2">colors</span><span class="jSf9DH-K2">[</span><span class="jSf6Z2BR2"> map_value </span><span class="jSf9DH-K2">]</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf9DH-K2">}
</span><span class="jSf6Z2BR2">    fp </span><span class="jSfdoBI62">=</span><span class="jSf6Z2BR2"> fopen</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">argv</span><span class="jSf9DH-K2">[</span><span class="jSfJnSXl1">2</span><span class="jSf9DH-K2">],</span><span class="jSf6Z2BR2"> </span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">wb</span><span class="jSfMt2g81">"</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    gdImagePng</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">im</span><span class="jSf9DH-K2">,</span><span class="jSf6Z2BR2"> fp</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
</span><span class="jSf6Z2BR2">    fclose</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">fp</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> gdImageDestroy</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">im</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;</span><span class="jSf6Z2BR2"> gdImageDestroy</span><span class="jSfoF-_93">(</span><span class="jSf6Z2BR2">srcim</span><span class="jSfoF-_93">)</span><span class="jSf9DH-K2">;
}</span></pre>
Here is an illustration comparing the various
different error multiplier levels in Thomas Knoll's algorithm.
I apologize for the large inline image size.<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scene_knoll_montage.gif"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scene_knoll_montage.gif" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scene_knoll_montage.gif"></a>
<p>Miscellaneous observations:
</p><ul><li> Apparently, as the error multiplier grows, so does the number of distinct palette entries it mixes together when necessary.
</li><li> Increasing the threshold matrix size will improve the quality 
while decreasing the regular patterns, but its usefulness maxes out at 
8x8 or 16x16.
<ul><li> Although not shown here, there was a very small visible 
difference between 8x8 and 16x16. There is probably no practical 
scenario that justifies the 64x64 matrix, aside from curiosity.
</li></ul></li><li> It is possible to adjust the matrix size and the 
candidate list size separately. For example, if you choose a 16x16 
matrix but limit the number of candidates to 4, you will get a rendering
 result that looks very much as if it was just 2x2 matrix, but is of 
better quality. The bottom-middle video is an example of such set-up. 
The optimize for speed, you might pay attention to the fact that the 
speed of the algorithm is directly proportional to the size of the 
candidate list.
</li><li> As with all positional-dithering algorithms, it is possible to
 extend part of the dithering to a temporal rather than to a spatial 
axis. It will appear as flickering. In the industry, temporal dithering 
is actually performed by some low-end TFT displays that cannot achieve 
their advertised color depth by honest means. The bottom right corner 
video uses temporal dithering; however, because of how dramatically it 
makes GIF files larger, a combination of settings was chosen that only 
yields a very modest amount of temporal dithering.
</li></ul></div></div><h2><a name="AnimatedComparison"></a>Animated comparison</h2><div class="deeper">
Here is an animated comparison of the four palette-aware
ordered dithering algorithms covered in this article.
Apologies for the fact that it is not exactly the same scene
as in the static picture: I had no savegame near that particular
event, so I did the best I could. It is missing the gowned character.
<p>Note: The vertical moving line
is due to screen scrolling and imperfect image stitching, and the
changes around the left window are due to sunshine rays that the
game animates in that region. The jitter in the rightside window
is also caused by screen scrolling and imperfect image stitching.
</p><p><a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scene_anim.gif"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scene_anim.gif" class="embedleft" alt="left"></a>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scene_anim_still.jpg"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scene_anim_still.jpg" class="embedright" alt="right"></a>
Left: Yliluoma's ordered dithering algorithm 1 with tri-tone dithering enabled.<br>
Matrix size = 8x8, comparison = RGB<sup>L</sup>.
</p><p>Right: Still image from the animation, prior to quantization and dithering.
<br clear="all">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scene_anim1i.gif"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scene_anim1i.gif" class="embedleft" alt="left"></a>
Left: Improved Yliluoma's ordered dithering algorithm 1 with gamma correction enabled (γ = 2.2).<br>
Matrix size = 8x8, candidate list size = 8, comparison = CIEDE2000,
luminance threshold = 700% of average (45% of maximum contrast).
This set of parameters resulted in 211396 precalculated combinations.
Quad-core rendering time with cache: About 17 seconds per frame.
That is how long it takes to do CIEDE2000 comparisons against 211469
candidates for each uniquely-colored pixel (though I cheated by stripping
two lowest-order bits from each channel, making it about 4× faster than
it would have been). I call this algorithm
<em>"improved"</em> because of how it is now extensible to any number of
pixel color combinations and how the actual combining is pre-done,
making rendering faster (an advantage which is profoundly countered
with the extreme parameters used here).
It is also most accurate one, because it is
completely about "measuring" rather than "estimating". But it is
also most subject to the need of psychovisual pruning, lest the result
look too coarse (as is still the case here).
<br clear="all">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scene_anim3.gif"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scene_anim3.gif" class="embedleft" alt="left"></a>
Left: Yliluoma's ordered dithering algorithm 2 with gamma correction enabled (γ = 2.2).<br>
Matrix size = 8x8, candidate list size = 16, comparison = RGB<sup>L</sup>.
<br clear="all">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scene_anim4.gif"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scene_anim4.gif" class="embedleft" alt="left"></a>
Left: Yliluoma's ordered dithering algorithm 3 with gamma correction enabled (γ = 2.2).<br>
Matrix size = 8x8, candidate list size = 64, comparison = CIEDE2000,
luminance threshold = 700% of average (45% of maximum contrast).
<br clear="all">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/scene_anim2.gif"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/scene_anim2.gif" class="embedleft" alt="left"></a>
Left: Thomas Knoll's pattern dithering algorithm (patented by Adobe®), with
the following non-spec parameters so as to not infringe on the patent¹:<br>
Matrix size = 8x8, candidate list size = 64, comparison = RGB<sup>L</sup>.
<br clear="all">
</p></div><h2><a name="FromThereToHere"></a>From there to here</h2><div class="deeper">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/img-31.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/img-31.png" class="embedleft" alt="left"></a>
Left: Just to illustrate where I started from, here is a screenshot
from a PC game that uses (pre-rendered) dithering very well
(<a class="extlink" id="iB8696B06" href="http://web.archive.org/web/20171024201240/http://lparchive.org/Princess-Maker-2/">Princess Maker 2</a>).<br clear="all">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/img-31d-gamma.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/img-31d-gamma.png" class="embedleft" alt="left"></a>
Left: I wanted to see if my algorithm can reproduce this similar effect,
so first I undithered the image using a simple recursively-2x2 undithering
algorithm that I wrote. The undithered image is shown here.
A gamma correction of 2.2 was applied to the dithering calculations.<br clear="all">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/img-31d.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/img-31d.png" class="embedleft" alt="left"></a>
Left: The undithered image, without gamma correction. The dithering
algorithms profiled in this list do not do gamma correction, so a gamma
correction is not warranted for in the undithered image either,
if we want to recreate the original dithered image.<br clear="all">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/img-31k.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/img-31k.png" class="embedleft" alt="left"></a>
Left: What Thomas Knoll's dithering algorithm (pattern dithering)
produces for the
undithered image, when it is re-dithered using the original image's
palette with X=1.0, threshold matrix size 8x8, candidate list size 64.
Different settings were tested, but none were found that would make
it resemble more the original picture.<br clear="all">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/img-31k2.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/img-31k2.png" class="embedleft" alt="left"></a>
Left: After tweaking the parameters outside the specifications,
I was able to get this picture from Thomas Knoll's dithering algorithm.
Here, X=1.5. The other settings are the same as before.<br clear="all">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/img-31y.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/img-31y.png" class="embedleft" alt="left"></a>
Left: What Joel Yliluoma's dithering algorithm 1 produces for the same challenge.
However, to get this particular result, the tri-tone call to ColorCompare had
to be explicitly modified to disregard the difference between the component
pixels. The EvaluateMixingError was likewise changed in a similar manner.
Note that even though did discover the tri-tone dithering patterns for
the dress, it has pixel artifacts around the clouds due to shifts between
different dithering algorithms. It also did not discover the four-color
patterns (only tri-tone search was enabled), and chose a grayish solid
brown for those regions instead.<br clear="all">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/img-31ky.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/img-31ky.png" class="embedleft" alt="left"></a>
Left: Knoll-Yliluoma dithering algorithm. In this improvised algorithm,
the temporary colors are also tested against all two-color mixes from
the palette (N²), and if such a mix was chosen, then <em>both</em> colors are
added to the candidate list at the same time (the psychovisual model
discussed earlier is being ignored for now).
In this picture, the matrix size is 64x64 and the number of candidates
generated is 1024.<br clear="all">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/img-31y2.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/img-31y2.png" class="embedleft" alt="left"></a>
Left: Yliluoma's dithering algorithm #2. A gamma correction level
of 2.2 was used (and the gamma-corrected undithered source image).
In this picture, the matrix size is 4x4 and the number of candidates
generated is 16. The dithering patterns for the sky and the clouds
are somewhat noticeably uneven. It turned out to be quite difficult
to fix.
<br clear="all">
</div><h2><a name="Appendix 1GammaCorrection"></a>Appendix 1: Gamma correction</h2><div class="deeper">
Dithering mixes colours together. Although it is surprising at first,
for <em>proper</em> mixing one needs to pay attention to <em>gamma correction</em>
in order to do proper mixing. Otherwise, one ends up creating mixes that
do not represent the original color. Illustrated here.
<p>First, without gamma correction:<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam_in.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"></a><br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-1.0.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam-1_002.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-1.0.png"></a> Gamma=1.0<br>
One can immediately observe that these two gradients don't line up.
The bottom, dithered one is much brighter than the top, original one.<br>
Clearly, the 50&nbsp;%&nbsp;white in the upper bar is not really a 50&nbsp;%&nbsp;white;
it is much darker than that. To produce that color from a mix of black
and white, you have to put a lot more black into the mix than white.
</p><p>Then, at varying levels of gamma correction:<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam_in.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"></a><br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-0.1.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam-0_002.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-0.1.png"></a> Gamma=0.1<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam_in.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"></a><br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-0.5.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam-0.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-0.5.png"></a> Gamma=0.5<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam_in.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"></a><br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-1.5.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam-1.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-1.5.png"></a> Gamma=1.5<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam_in.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"></a><br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-2.0.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam-2.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-2.0.png"></a> Gamma=2.0<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam_in.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"></a><br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-2.2.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam-2.htm" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-2.2.png"></a> Gamma=2.2<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam_in.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"></a><br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-3.0.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam-3.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-3.0.png"></a> Gamma=2.5<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam_in.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam_in.png"></a><br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-10.0.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammam-10.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/gammam-10.0.png"></a> Gamma=10.0<br>
</p><p>Assuming your monitor has a gamma of 2.2, according to this graph,
the true 50&nbsp;% mix of 0&nbsp;%&nbsp;white and 100&nbsp;%&nbsp;white is generated by
the monitor only when a <em>73&nbsp;%&nbsp;white</em> is signalled.
</p><p>To achieve a match for what the monitor claims is 50&nbsp;%&nbsp;white,
we can solve the equation
(<em></em>(0%<sup>γ</sup>×X&nbsp;+&nbsp;100%<sup>γ</sup>×(1−X)<em></em>)<em></em>)<sup>(1÷γ)</sup>&nbsp;=&nbsp;50%,
or rather, the general case of
(<em></em>(a<sup>γ</sup>&nbsp;×&nbsp;X&nbsp;+&nbsp;b<sup>γ</sup>&nbsp;&nbsp;×&nbsp;(1−X)<em></em>)<em></em>)<sup>(1÷γ)</sup>&nbsp;=&nbsp;c),
and we get the following equation:
X&nbsp;=&nbsp;(b<sup>γ</sup>&nbsp;−&nbsp;c<sup>γ</sup>)&nbsp;÷&nbsp;(b<sup>γ</sup>&nbsp;−&nbsp;a<sup>γ</sup>).
<br>
Substituting a&nbsp;=&nbsp;0&nbsp;% (black), b&nbsp;=&nbsp;100&nbsp;% (white), c&nbsp;=&nbsp;50&nbsp;%,
we get that X&nbsp;=&nbsp;78&nbsp;%, so we must mix 78&nbsp;% of black and 22&nbsp;% of
white to match the appearance of monitor's 50&nbsp;% white.
</p><p>Computer displays usually have a gamma level of around 1.8 or 2.2,
though it is convenient if the user has the choice of selecting
their own gamma value.
</p><p>The process of gamma-aware and gamma-unaware
mixing of colors <tt>a</tt> and <tt>b</tt>, ranging from 0..1,
according to mixing ratio <tt>ratio</tt>, from 0..1:
</p><p><table class="wikitable" border="1"><tbody><tr><th>  Gamma-unaware mixing</th><th>  Gamma-aware mixing</th></tr>
<tr><td>  result = a + (b−a)*ratio</td><td>  a‘ = a<sup>γ</sup><br> b‘ = b<sup>γ</sup><br> result‘ = a‘ + (b‘−a‘)*ratio<br> result = result‘<sup>1÷γ</sup></td></tr>
</tbody></table></p><p>Or mixing of three colors in an equal proportion:
</p><p><table class="wikitable" border="1"><tbody><tr><th>  Gamma-unaware mixing</th><th>  Gamma-aware mixing</th></tr>
<tr><td>  result = (a+b+c) ÷ 3</td><td>  a‘ = a<sup>γ</sup><br> b‘ = b<sup>γ</sup><br> c‘ = c<sup>γ</sup><br> result‘ = (a‘ + b‘ + c‘) ÷ 3<br> result = result‘<sup>1÷γ</sup></td></tr>
</tbody></table></p><p>Or in a more general fashion, you might always opt to work with linear
colors (un-gamma the original pictures and the palette), and then gamma-correct the
final result just before writing it into the image file or sending it to the screen.
</p><p>The algorithms outlined on this page can easily be adapted to work with gamma correction.
However, there is still one unsolved "gotcha". Both Yliluoma dithering #2
and our implementation of Knoll's pattern dithering suffer from it.
</p><p>Below, we use the EGA palette (four levels of grayscale: 0%, 33%, 66% and 100%):<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae_in.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammae_in.htm" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae_in.png"></a><br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae-0.1.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammae-0.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae-0.1.png"></a> Gamma=0.1<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae_in.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammae_in.htm" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae_in.png"></a><br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae-0.5.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammae-0_002.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae-0.5.png"></a> Gamma=0.5<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae_in.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammae_in.htm" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae_in.png"></a><br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae-1.0.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammae-1.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae-1.0.png"></a> Gamma=1.0<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae_in.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammae_in.htm" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae_in.png"></a><br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae-2.2.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammae-2.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae-2.2.png"></a> Gamma=2.2<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae_in.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammae_in.htm" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae_in.png"></a><br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae-10.0.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/gammae-10.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/gammae-10.0.png"></a> Gamma=10.0<br>
The algorithm hits the solid-color spots (0%, 33%, 66% and 100%)
just fine, but on any other gamma level than 1.0,
the <em>between</em>s of the solid spots are wrong.
Somehow, it starts "borrowing" colors
from the outside of the two anchor spots rather than logarithmically
mixing the colors of the two anchor spots.
It happens all according to the algorithm.
It is currently unknown how to fix it.
</p></div><h2><a name="Appendix 2ThresholdMatrix"></a>Appendix 2: Threshold matrix</h2><div class="deeper">
We introduce a threshold matrix that is defined as follows.
<p></p><ul><li> Let the matrix size be X horizontally and Y vertically. Let N be the number of nodes, i.e. <tt>X&nbsp;×&nbsp;Y</tt>.
</li><li> The matrix contains all the successive fractions from <tt>0&nbsp;÷&nbsp;N</tt> to <tt>(N&nbsp;−&nbsp;1)&nbsp;÷&nbsp;N</tt>, at step <tt>1&nbsp;÷&nbsp;N</tt>.
</li><li> The fractions are ordered geometrically in the matrix so that 
the pseudo-toroidal distance of any two numbers in the matrix correlates
 inversely to their difference.
</li><li> Pseudo-toroidal distance between two points <tt>(x1,&nbsp;y1)</tt> and <tt>(x2,&nbsp;y2)</tt> is defined as: <tt>min(abs(x1−x2),X−abs(x1−x2)<em></em>)&nbsp;+&nbsp;min(abs(y1−y2),Y−abs(y1−y2)<em></em>)</tt>.
</li></ul><p>This is the same or almost the same as is commonly known as Bayer's threshold matrix.
</p><h3><a name="AlgorithmForGeneratingARectangleShapedMatrix"></a>Algorithm for generating a rectangle-shaped matrix</h3><div class="deeper">
We define a simple algorithm for assigning the values to a square-shaped
threshold matrix. The value for slot <tt>(x,&nbsp;y)</tt> is calculated as follows:
<p></p><ol><li> Take two values, the y coordinate and the XOR of x and y coordinates
</li><li> Interleave the bits of these two values in reverse order.
</li><li> Floating-point divide the result by N. (Optional, required by some algorithms but not all.)
</li></ol><p>Example implementation in C++ language:
</p><p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> M</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> M</span><span class="jSfVQfQP2">&lt;=</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">M</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> dim </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;&lt;</span><span class="jSf6Z2BR2"> M</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        printf</span><span class="jSfVQfQP2">(</span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2"> X=%u, Y=%u:\n</span><span class="jSfMt2g81">"</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> dim</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">dim</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> y</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> y</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">dim</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">y</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            printf</span><span class="jSfVQfQP2">(</span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">   </span><span class="jSfMt2g81">"</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> x</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> x</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">dim</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">x</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> v </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> mask </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> M</span><span class="jSfVQfQP2">-</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> xc </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> x </span><span class="jSfVQfQP2">^</span><span class="jSf6Z2BR2"> y</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> yc </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> y</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> bit</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> bit </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">2</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">M</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">--</span><span class="jSf6Z2BR2">mask</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                    v </span><span class="jSfLoabn2">|=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">yc </span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSf6Z2BR2"> mask</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;&lt;</span><span class="jSf6Z2BR2"> bit</span><span class="jSfVQfQP2">++</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                    v </span><span class="jSfLoabn2">|=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">xc </span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSf6Z2BR2"> mask</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;&lt;</span><span class="jSf6Z2BR2"> bit</span><span class="jSfVQfQP2">++</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">                printf</span><span class="jSfVQfQP2">(</span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">%4d</span><span class="jSfMt2g81">"</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> v</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">            printf</span><span class="jSfVQfQP2">(</span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2"> |</span><span class="jSfMt2g81">"</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">y </span><span class="jSfVQfQP2">==</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> printf</span><span class="jSfVQfQP2">(</span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2"> 1/%u</span><span class="jSfMt2g81">"</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> dim </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> dim</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            printf</span><span class="jSfVQfQP2">(</span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">\n</span><span class="jSfMt2g81">"</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}</span></pre>
The algorithm can easily be extended for other rectangular matrices,
as long as the lengths of both sides are powers of two.
This is useful when you are rendering for an output device
that uses a significantly non-square pixel aspect ratio
(for example, 640×200 on CGA). Example:
<p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> M</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> M</span><span class="jSfVQfQP2">&lt;=</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">M</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> L</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> L</span><span class="jSfVQfQP2">&lt;=</span><span class="jSfA8tmj1">3</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">L</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> xdim </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;&lt;</span><span class="jSf6Z2BR2"> M</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> ydim </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;&lt;</span><span class="jSf6Z2BR2"> L</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        printf</span><span class="jSfVQfQP2">(</span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2"> X=%u, Y=%u:\n</span><span class="jSfMt2g81">"</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> xdim</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">ydim</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> y</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> y</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">ydim</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">y</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            printf</span><span class="jSfVQfQP2">(</span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">   </span><span class="jSfMt2g81">"</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> x</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> x</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">xdim</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">x</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> v </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> offset</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> xmask </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> M</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> ymask </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> L</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2">                         
                </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">M</span><span class="jSfVQfQP2">==</span><span class="jSfA8tmj1">0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">||</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">M </span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> L </span><span class="jSfVQfQP2">&amp;&amp;</span><span class="jSf6Z2BR2"> L </span><span class="jSfVQfQP2">!=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">))
</span><span class="jSf6Z2BR2">                </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                    </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> xc </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> x </span><span class="jSfVQfQP2">^</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">y </span><span class="jSfVQfQP2">&lt;&lt;</span><span class="jSf6Z2BR2"> M</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSf6Z2BR2"> L</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> yc </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> y</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                    </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> bit</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> bit </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> M</span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2">L</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                        v </span><span class="jSfLoabn2">|=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">yc </span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">--</span><span class="jSf6Z2BR2">ymask</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;&lt;</span><span class="jSf6Z2BR2"> bit</span><span class="jSfVQfQP2">++</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                        </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">offset </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> M</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> offset </span><span class="jSfVQfQP2">&gt;=</span><span class="jSf6Z2BR2"> L</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> offset </span><span class="jSfLoabn2">-=</span><span class="jSf6Z2BR2"> L</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                            v </span><span class="jSfLoabn2">|=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">xc </span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">--</span><span class="jSf6Z2BR2">xmask</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;&lt;</span><span class="jSf6Z2BR2"> bit</span><span class="jSfVQfQP2">++</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                    </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">                </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">else
</span><span class="jSf6Z2BR2">                </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2">   
                    </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> xc </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> x</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> yc </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> y </span><span class="jSfVQfQP2">^</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">x </span><span class="jSfVQfQP2">&lt;&lt;</span><span class="jSf6Z2BR2"> L</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSf6Z2BR2"> M</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                    </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> bit</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> bit </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> M</span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2">L</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                        v </span><span class="jSfLoabn2">|=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">xc </span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">--</span><span class="jSf6Z2BR2">xmask</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;&lt;</span><span class="jSf6Z2BR2"> bit</span><span class="jSfVQfQP2">++</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                        </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">offset </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> L</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> offset </span><span class="jSfVQfQP2">&gt;=</span><span class="jSf6Z2BR2"> M</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> offset </span><span class="jSfLoabn2">-=</span><span class="jSf6Z2BR2"> M</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                            v </span><span class="jSfLoabn2">|=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">((</span><span class="jSf6Z2BR2">yc </span><span class="jSfVQfQP2">&gt;&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">--</span><span class="jSf6Z2BR2">ymask</span><span class="jSfVQfQP2">)&amp;</span><span class="jSfA8tmj1">1</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;&lt;</span><span class="jSf6Z2BR2"> bit</span><span class="jSfVQfQP2">++</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                    </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">                </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">                printf</span><span class="jSfVQfQP2">(</span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">%4d</span><span class="jSfMt2g81">"</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> v</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">            printf</span><span class="jSfVQfQP2">(</span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2"> |</span><span class="jSfMt2g81">"</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">y </span><span class="jSfVQfQP2">==</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> printf</span><span class="jSfVQfQP2">(</span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2"> 1/%u</span><span class="jSfMt2g81">"</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> xdim </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> ydim</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            printf</span><span class="jSfVQfQP2">(</span><span class="jSfMt2g81">"</span><span class="jSf1vtiR2">\n</span><span class="jSfMt2g81">"</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}</span></pre>
It is not perfect (for example, in 4x4, the #7 and #8 are right next to each others,
and #3—#4 and #11—#12 are just one diagonal across), but it is good enough in practice.
<p>Example outputs:
</p><p></p><pre>  X=4, Y=2:                             X=4, Y=8:
       0   4   2   6 | 1/8                   0  12   3  15 | 1/32
       3   7   1   5 |                      16  28  19  31 |
                                             8   4  11   7 |
  X=4, Y=4:                                 24  20  27  23 |
       0  12   3  15 | 1/16                  2  14   1  13 |
       8   4  11   7 |                      18  30  17  29 |
       2  14   1  13 |                      10   6   9   5 |
      10   6   9   5 |                      26  22  25  21 |
</pre><em></em>
<pre>  X=8, Y=2:                                     X=2, Y=2:
       0   8   4  12   2  10   6  14 | 1/16          0   3 | 1/4
       3  11   7  15   1   9   5  13 |               2   1 |
</pre><em></em>
<pre>  X=8, Y=4:                                     X=2, Y=4:
       0  16   8  24   2  18  10  26 | 1/32          0   3 | 1/8
      12  28   4  20  14  30   6  22 |               4   7 |
       3  19  11  27   1  17   9  25 |               2   1 |
      15  31   7  23  13  29   5  21 |               6   5 |
</pre><em></em>
<pre>  X=8, Y=8:                                     X=2, Y=8:
       0  48  12  60   3  51  15  63 | 1/64          0   3 | 1/16
      32  16  44  28  35  19  47  31 |               8  11 |
       8  56   4  52  11  59   7  55 |               4   7 |
      40  24  36  20  43  27  39  23 |              12  15 |
       2  50  14  62   1  49  13  61 |               2   1 |
      34  18  46  30  33  17  45  29 |              10   9 |
      10  58   6  54   9  57   5  53 |               6   5 |
      42  26  38  22  41  25  37  21 |              14  13 |
</pre>Such matrices where the sides are not powers of two can be designed by hand
by mimicking the same principles. However, they can have a visibly uneven
look, and thus are rarely worth using. Examples:
<p></p><pre>  X=5, Y=3:                X=3, Y=3:
</pre><em></em>
<pre>    0 12  7  3  9| 1/15     0 5 2 | 1/9
   14  8  1  5 11|          3 8 7 |
    6  4 10 13  2|          6 1 4 |
</pre></div><h3><a name="ComparisonOfDifferentMatrixSizes"></a>Comparison of different matrix sizes</h3><div class="deeper">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/demo_full.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/demo_full.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/demo_full.png"></a><br>
<p>In the following illustration, the above picture (animated a bit)
is rendered using various different dithering methods.
The image is magnified by a factor of 2 to make the pixels visible:
</p><p><a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/demo.gif"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/demo.gif" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/demo.gif"></a><br>
This palette was used (regular palette, red,green,blue incrementing at even intervals 255/3, 255/3 and 255/2 respectively):<br>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/demopal.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/demopal.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/ordered_dither/demopal.png"></a>
</p><p>Pattern dithering refers to the patented algorithm used by Adobe® Photoshop®
by Adobe Systems Incorporated. (Hyenas note, I am not claiming ownership of their trademark.)
It uses a fixed 4x4 threshold matrix and a configurable error multiplier;
here 0.25 was used. The algorithm was explained in detail earlier in this article.
</p><p>Most of the example pictures of this article used the 8x8 matrix.
</p></div></div><h2><a name="Appendix 3ColorComparisons"></a>Appendix 3: Color comparisons</h2><div class="deeper">
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_base.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_base.png" class="embedleft" alt="left"></a>
<a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/webpal.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/webpal.png" class="embedright" alt="right"></a>
There exist a number of algorithms for comparing the similarity
between two colors.
<p>For purposes of illustration, I use this graphical image and
the result of quantizing it using the websafe palette, without
dithering. I also provided a dithered version (improved Yliluoma
dithering 1 with matrix size 2x2, 2 candidates, selected
from all 2-colors combinations (23436 of them)<em></em>).
</p><p>Note that it is often sufficient to compare the <em>squared</em>
delta-E rather than the delta-E itself.
The results are the same, but are achieved faster.
</p><p>A few standard algorithms are listed below. I took the liberty
of implementing some optimizations to the more complex formulae.<br clear="all">
</p><p><table class="wikitable" border="1"><tbody><tr><th>  Example (not dithered)</th><th> Algorithm name and information</th><th>  Example (dithered, γ = 2.2)</th></tr>
<tr><th>  <a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_rgb.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_rgb.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_rgb.png"></a></th><td> Euclidean distance in RGB space.<br> This algorithm can utilize a kd-tree for searches. <br> <br> <small>ΔE² := ΔRed²&nbsp;+&nbsp;ΔGreen²&nbsp;+&nbsp;ΔBlue² </small></td><th>  <a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_rgb_d.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_rgb_d.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_rgb_d.png"></a></th></tr>
<tr><th>  <a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_hsv.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_hsv.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_hsv.png"></a></th><td> HSV<sup>L</sup>, a custom luma-weighted HSV algorithm by the article's author.<br> This algorithm can utilize a kd-tree for searches.<br> <br> <small> Max1 := max(R1,G1,B1); Min1 := min(R1,G1,B1); D1 := Max1−Min1;<br> H1 &nbsp; := if (D1=0, then 0,<br>&nbsp; &nbsp; else if (R1=Max1, then &nbsp; &nbsp; (G1−B1)÷D1,<br>&nbsp; &nbsp; else if (G1=Max1, then 2+(B1−R1)÷D1,<br>&nbsp;
 &nbsp; else &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;4+(R1−G1)÷D1)<em></em>)<em></em>)<br> S1 &nbsp; := if (Max1=0, then 0, else D1÷Max1);<br> H1x := cos(H1×60°)×S1×luma1;<br> H1y := sin(H1×60°)×S1×luma1;<br> <em>Similarly for H2x,H2y with R2,G2,B2 (omitted for brevity)</em><br> ΔE² := (H2x−H1x)² + (H2y−H1y)² + (luma2−luma1)² </small> <br> <br> Where <small>luma1 := Red1×0.299 + Green1×0.587 + Blue2×0.114</small>, similarly for luma2.</td><th>  <a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_hsv_d.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_hsv_d.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_hsv_d.png"></a></th></tr>
<tr><th>  <a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_cie76.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_cie76.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_cie76.png"></a></th><td> CIE76 Delta-E: Euclidean distance in CIE L*a*b* space<br> This algorithm can utilize a kd-tree for searches. <br> <br> <small>ΔE² := ΔL²&nbsp;+&nbsp;Δa²&nbsp;+&nbsp;Δb²</small><br> <br> Where ΔL := L1 − L2. The meaning of delta, Δ is similar for any other variable.</td><th>  <a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_cie76_d.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_cie76_d.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_cie76_d.png"></a></th></tr>
<tr><th>  <a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_cie94.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_cie94.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_cie94.png"></a></th><td> CIE94 Delta-E<br> <br> <small>c12 := √(C1 × C2);<br>SC := 1 + 0.048×c12;<br>SH := 1 + 0.014×c12; <br> ΔH² := max(0, Δa² + Δb² − ΔC²); <br> ΔE² := ΔL² + ΔC²÷SC² + ΔH²÷SH² </small><br> <br> Where C := √(a² + b²), h := atan2(b, a);</td><th>  <a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_cie94_d.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_cie94_d.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_cie94_d.png"></a></th></tr>
<tr><th>  <a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_cmc.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_cmc.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_cmc.png"></a></th><td> CMC l:c <br> <br> <small>l := 0.5; c := 1;<br> T := if(164° ≤ h1 ≤ 345°,<br> &nbsp; &nbsp; then 0.56 + |0.2×cos(h1+168°)|,<br> &nbsp; &nbsp; else 0.36 + |0.4×cos(h1+35°)|<em></em>);<br> F := √(C1<sup>4</sup> ÷ (C1<sup>4</sup> + 1900)<em></em>);<br> SL := if(L1 &lt; 16, then 0.511, else 0.040975×L1 ÷ (1+0.01765×L1)<em></em>);<br> SC := 0.0638×C1 ÷ (1 + 0.0131×C1) + 0.0638;<br> SH := SC × (F×T + 1 − F);<br> ΔE² := (ΔL ÷ (l×SL)<em></em>)² + (ΔC ÷ (c×SC)<em></em>)² + (<em></em>(√max(0, Δa² + Δb² − ΔC²)<em></em>) ÷ SH)² </small></td><th>  <a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_cmc_d.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_cmc_d.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_cmc_d.png"></a></th></tr>
<tr><th>  <a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_bfd.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_bfd.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_bfd.png"></a></th><td> BFD l:c <br> <br> <small>l := 1.5; c := 1;<br> Δbfd := 54.6 × (log(<em></em>(1.5+Y2) ÷ (1.5+Y1)<em></em>)<em></em>);<br>
 t := &nbsp; &nbsp; 0.627 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + 0.055×cos(h̄ &nbsp; 
&nbsp; − 254°) − 0.040×cos(2×h̄ − 136°)<br>&nbsp; &nbsp; &nbsp; + 0.070×cos(3×h̄ − 32°) + 0.049×cos(4×h̄ + 114°) − 0.015×cos(5×h̄ − 103°);<br> RH := −0.260×cos(h̄ &nbsp; &nbsp; − 308°) − 0.379×cos(2×h̄ − 160°) − 0.636×cos(3×h̄ + 254°)<br>&nbsp; &nbsp; &nbsp; &nbsp; + 0.226×cos(4×h̄ + 140°) − 0.194×cos(5×h̄ + 280°);<br> dc := 0.035 * C̄ ÷ (1 + 0.00365×C̄) + 0.521;<br> dh := dc × (1 + (t − 1)×√(C̄<sup>4</sup> ÷ (C̄<sup>4</sup> + 14000)<em></em>)<em></em>);<br> ΔH² := max(0, Δa² + Δb² − ΔC²); ΔH := √(ΔH²); <br> ΔE² := (Δbfd÷l)² + (ΔC÷(c×dc)<em></em>)² + (ΔH²÷dh²) + (ΔC×ΔH ÷ (dc × dh)<em></em>) × RH × √(C̄<sup>6</sup> ÷ (C̄<sup>6</sup> + 7×10<sup>7</sup>)<em></em>) </small><br>
 Note: The code above uses combining diacritical marks to represent 
arithmetic means, as in below. Some browsers render them incorrectly. 
Y1,Y2 are the components from the XYZ form of the color.<br><small> C̄ := (C1 + C2) × 0.5; h̄ := (h1 + h2) × 0.5). </small></td><th>  <a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_bfd_d.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_bfd_d.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_bfd_d.png"></a></th></tr>
<tr><th>  <a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_ciede2000.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_ciede2000.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_ciede2000.png"></a></th><td> CIEDE2000 Delta-E <br> <br> <small>Gt := 0.5 × √(C̄<sup>7</sup> ÷ (C̄<sup>7</sup> + 25<sup>7</sup>)<em></em>);<br> A1 := (1.5 − Gt) × a1; c1 := √(A1² + b1²);<br> A2 := (1.5 − Gt) × a2; c2 := √(A2² + b2²);<br> H1 := if(c1 &lt; 10<sup>−9</sup>, then 0, else (<em></em>(atan2(b1, A1) + 360°) mod 360°); <br> H2 := if(c2 &lt; 10<sup>−9</sup>, then 0, else (<em></em>(atan2(b2, A2) + 360°) mod 360°);<br> dh := if(c1 &lt; 10<sup>−9</sup> or c2 &lt; 10<sup>−9</sup>, then 0, else (<em></em>(H2−H1 + 180°) mod 360°) − 180°);<br> Hs := H1+H2 + if(ΔH &gt; 180°, then if(H1+H2 ≥ 360°, −360°, 360°), else 0);<br> h := if(c1 &lt; 10<sup>−9</sup> or c2 &lt; 10<sup>−9</sup>, then H1+H2, else 0.5 × Hs);<br> T := 1 − 0.17×cos(h − 30°) + 0.24×cos(2×h) + 0.32×cos(3×h + 6°) − 0.2×cos(4×h − 63°);<br> hh := (h − 275°) ÷ 25°; <em>// Result is the same whether h is in degrees or radians</em><br> SL := 1 + (0.015 × (L̄ − 50)²) ÷ √(20 + (L̄ − 50)²);<br> dcSC := Δc ÷ (1 + 0.45 × c̄);<br> dHSH := 2 × √(c1 × c2) × sin(0.5 × dh) ÷ (1 + 0.15 × c̄ × T);<br> ΔE² := (ΔL÷SL)² + dcSC² + dHSH² − (2 × sin(30° × e<sup>−hh²</sup>) × dcSC × dHSH × √(c̄<sup>7</sup> ÷ (c̄<sup>7</sup> + 25<sup>7</sup>)<em></em>)<em></em>)  </small></td><th>  <a href="http://web.archive.org/web/20171024201240/http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_ciede2000_d.png"><img src="Arbitrary-palette%20positional%20dithering%20algorithm_files/deltae_ciede2000_d.png" class="embed" alt="http://bisqwit.iki.fi/jutut/kuvat/animmerger/deltae_ciede2000_d.png"></a></th></tr>
</tbody></table></p><p>Each of these algorithms have strengths and weaknesses, and
the algorithm chosen for a task depends on which features one
wants to emphasize. The appearance of CIE L*a*b* based methods
also depends on the whitepoint and matrix used for converting
the RGB value to XYZ.
</p><h3><a name="UsingKdTreeToOptimizePaletteSearches"></a>Using kd-tree to optimize palette searches</h3><div class="deeper">
When using a color comparison method based on an euclidean search,
the search can be made significantly faster by inserting each palette
color into a <a class="extlink" id="i756C7BCD" href="http://web.archive.org/web/20171024201240/http://en.wikipedia.org/wiki/kd-tree">kd-tree</a>,
from which nearest-neighbor searches can be done very quickly:
Instead of an <tt>O(N)</tt> complexity, a <tt>O(log(N)<em></em>)</tt> complexity is acquired.
<p>An example C++ kd-tree implementation (simple, unbalanced one)
is included below, along with example code for utilizing it
in palette searches, is shown below:
</p><p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSfAdB3O2">#include &lt;utility&gt; </span><span class="jSfQHvUD">// for std::pair
</span><span class="jSfAdB3O2">#include "alloc/FSBAllocator.hh"

</span><span class="jSfTJArG3">/* kd-tree implementation translated to C++
 * from java implementation in VideoMosaic
 * at http://www.intelegance.net/video/videomosaic.shtml.
 */

</span><span class="jSf4ooiC1">template</span><span class="jSfVQfQP2">&lt;</span><span class="jSf4ooiC1">typename</span><span class="jSf6Z2BR2"> V</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> K </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">3</span><span class="jSfVQfQP2">&gt;
</span><span class="jSf4ooiC1">class</span><span class="jSf6Z2BR2"> KDTree
</span><span class="jSfqHLeV2">{
</span><span class="jSfWtbTI">public</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">struct</span><span class="jSf6Z2BR2"> KDPoint
    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">K</span><span class="jSfqHLeV2">];

</span><span class="jSf6Z2BR2">        KDPoint</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">        KDPoint</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> a</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> b</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> c</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            coord</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> a</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> coord</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> b</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> coord</span><span class="jSfqHLeV2">[</span><span class="jSfA8tmj1">2</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> c</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">        KDPoint</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> v</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">K</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> n</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> n</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">K</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">n</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">n</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> v</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">n</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">bool</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">operator</span><span class="jSfVQfQP2">==(</span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDPoint</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> n</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> n</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">K</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">n</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">n</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">!=</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">n</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">false</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">true</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> sqrdist</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDPoint</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> result </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> n</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> n</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">K</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">n</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> diff </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">n</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">-</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">n</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">                  result </span><span class="jSfLoabn2">+=</span><span class="jSf6Z2BR2"> diff</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">diff</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> result</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">};
</span><span class="jSfWtbTI">private</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">struct</span><span class="jSf6Z2BR2"> KDRect
    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        KDPoint </span><span class="jSfTvV9Y2">min</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfTvV9Y2">max</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">        KDPoint bound</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDPoint</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> t</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            KDPoint p</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> i</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> i</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">K</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">i</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">t</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;=</span><span class="jSf6Z2BR2"> </span><span class="jSfTvV9Y2">min</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                    p</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfTvV9Y2">min</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">t</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&gt;=</span><span class="jSf6Z2BR2"> </span><span class="jSfTvV9Y2">max</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                    p</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfTvV9Y2">max</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">else
</span><span class="jSf6Z2BR2">                    p</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> t</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> p</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">void</span><span class="jSf6Z2BR2"> MakeInfinite</span><span class="jSfVQfQP2">()
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> i</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> i</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">K</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">i</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                </span><span class="jSfTvV9Y2">min</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">-</span><span class="jSfA8tmj1">1e99</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                </span><span class="jSfTvV9Y2">max</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">i</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2">  </span><span class="jSfA8tmj1">1e99</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">};

</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">struct</span><span class="jSf6Z2BR2"> KDNode
    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        KDPoint k</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        V       v</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        KDNode  </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">left</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">right</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">public</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">        KDNode</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> k</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">v</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">left</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">right</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">        KDNode</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDPoint</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> kk</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> V</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> vv</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> k</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">kk</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> v</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">vv</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> left</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> right</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">virtual</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">~</span><span class="jSf6Z2BR2">KDNode</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">delete</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">left</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">delete</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">right</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">static</span><span class="jSf6Z2BR2"> KDNode</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> ins</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDPoint</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> key</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> V</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> val</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">                            KDNode</span><span class="jSfVQfQP2">*&amp;</span><span class="jSf6Z2BR2"> t</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> lev</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(!</span><span class="jSf6Z2BR2">t</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">t </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">new</span><span class="jSf6Z2BR2"> KDNode</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">key</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> val</span><span class="jSfVQfQP2">))</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">key </span><span class="jSfVQfQP2">==</span><span class="jSf6Z2BR2"> t</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">k</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">/* key duplicate */
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">key</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">lev</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> t</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">k</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">lev</span><span class="jSfqHLeV2">]</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> ins</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">key</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> val</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> t</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">right</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">lev</span><span class="jSfVQfQP2">+</span><span class="jSfA8tmj1">1</span><span class="jSfVQfQP2">)%</span><span class="jSf6Z2BR2">K</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">else
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> ins</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">key</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> val</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> t</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">left</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2">  </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">lev</span><span class="jSfVQfQP2">+</span><span class="jSfA8tmj1">1</span><span class="jSfVQfQP2">)%</span><span class="jSf6Z2BR2">K</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">struct</span><span class="jSf6Z2BR2"> Nearest
        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDNode</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> kd</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2">        dist_sqd</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">};
</span><span class="jSf6Z2BR2">        </span><span class="jSfTJArG3">// Method Nearest Neighbor from Andrew Moore's thesis. Numbered
</span><span class="jSf6Z2BR2">        </span><span class="jSfTJArG3">// comments are direct quotes from there. Step "SDL" is added to
</span><span class="jSf6Z2BR2">        </span><span class="jSfTJArG3">// make the algorithm work correctly.
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">static</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">void</span><span class="jSf6Z2BR2"> nnbr</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDNode</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> kd</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDPoint</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> target</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">                         KDRect</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> hr</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">// in-param and temporary; not an out-param.
</span><span class="jSf6Z2BR2">                         </span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> lev</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">                         Nearest</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> nearest</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">// 1. if kd is empty then set dist-sqd to infinity and exit.
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(!</span><span class="jSf6Z2BR2">kd</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">return</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">// 2. s := split field of kd
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">int</span><span class="jSf6Z2BR2"> s </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> lev </span><span class="jSfVQfQP2">%</span><span class="jSf6Z2BR2"> K</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">// 3. pivot := dom-elt field of kd
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDPoint</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> pivot </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> kd</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">k</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2"> pivot_to_target </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> pivot</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">sqrdist</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">target</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">// 4. Cut hr into to sub-hyperrectangles left-hr and right-hr.
</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">//    The cut plane is through pivot and perpendicular to the s
</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">//    dimension.
</span><span class="jSf6Z2BR2">            KDRect</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> left_hr </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> hr</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">// optimize by not cloning
</span><span class="jSf6Z2BR2">            KDRect right_hr </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> hr</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            left_hr</span><span class="jSfVQfQP2">.</span><span class="jSfTvV9Y2">max</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">s</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2">  </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> pivot</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">s</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">            right_hr</span><span class="jSfVQfQP2">.</span><span class="jSfTvV9Y2">min</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">s</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> pivot</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">s</span><span class="jSfqHLeV2">];

</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">// 5. target-in-left := target_s &lt;= pivot_s
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">bool</span><span class="jSf6Z2BR2"> target_in_left </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> target</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">s</span><span class="jSfqHLeV2">]</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> pivot</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">coord</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">s</span><span class="jSfqHLeV2">];

</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDNode</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> nearer_kd</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDNode</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> further_kd</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            KDRect nearer_hr</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            KDRect further_hr</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">// 6. if target-in-left then nearer is left, further is right
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">target_in_left</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                nearer_kd </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> kd</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">left</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                nearer_hr </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> left_hr</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                further_kd </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> kd</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">right</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                further_hr </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> right_hr</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">// 7. if not target-in-left then nearer is right, further is left
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                nearer_kd </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> kd</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">right</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                nearer_hr </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> right_hr</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                further_kd </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> kd</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">left</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                further_hr </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> left_hr</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">// 8. Recursively call Nearest Neighbor with parameters
</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">//    (nearer-kd, target, nearer-hr, max-dist-sqd), storing the
</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">//    results in nearest and dist-sqd
</span><span class="jSf6Z2BR2">            nnbr</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">nearer_kd</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> target</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> nearer_hr</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> lev </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> nearest</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">// 10. A nearer point could only lie in further-kd if there were some
</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">//     part of further-hr within distance sqrt(max-dist-sqd) of
</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">//     target.  If this is the case then
</span><span class="jSf6Z2BR2">            </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDPoint closest </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> further_hr</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">bound</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">target</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">closest</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">sqrdist</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">target</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> nearest</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">dist_sqd</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                </span><span class="jSfTJArG3">// 10.1 if (pivot-target)^2 &lt; dist-sqd then
</span><span class="jSf6Z2BR2">                </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">pivot_to_target </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> nearest</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">dist_sqd</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">                </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                    </span><span class="jSfTJArG3">// 10.1.1 nearest := (pivot, range-elt field of kd)
</span><span class="jSf6Z2BR2">                    nearest</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">kd </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> kd</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                    </span><span class="jSfTJArG3">// 10.1.2 dist-sqd = (pivot-target)^2
</span><span class="jSf6Z2BR2">                    nearest</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">dist_sqd </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> pivot_to_target</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">                </span><span class="jSfTJArG3">// 10.2 Recursively call Nearest Neighbor with parameters
</span><span class="jSf6Z2BR2">                </span><span class="jSfTJArG3">//      (further-kd, target, further-hr, max-dist_sqd)
</span><span class="jSf6Z2BR2">                nnbr</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">further_kd</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> target</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> further_hr</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> lev </span><span class="jSfVQfQP2">+</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> nearest</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">            </span><span class="jSfTJArG3">// SDL: otherwise, current point is nearest
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">else</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">if</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">pivot_to_target </span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2"> nearest</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">dist_sqd</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">                nearest</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">kd       </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> kd</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">                nearest</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">dist_sqd </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> pivot_to_target</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">private</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">void</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">operator</span><span class="jSfLoabn2">=</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDNode</span><span class="jSfVQfQP2">&amp;)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">public</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">        KDNode</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDNode</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">            </span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> k</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">k</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> v</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">v</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">              left</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">left </span><span class="jSfVQfQP2">?</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">new</span><span class="jSf6Z2BR2"> KDNode</span><span class="jSfVQfQP2">(*</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">left</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">              right</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">right </span><span class="jSfVQfQP2">?</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">new</span><span class="jSf6Z2BR2"> KDNode</span><span class="jSfVQfQP2">(*</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">right</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">};
</span><span class="jSfWtbTI">private</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">    KDNode</span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2"> m_root</span><span class="jSfqHLeV2">;
</span><span class="jSfWtbTI">public</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">    KDTree</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> m_root</span><span class="jSfVQfQP2">(</span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">virtual</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">~</span><span class="jSf6Z2BR2">KDTree</span><span class="jSfVQfQP2">()</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">delete</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">m_root</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">bool</span><span class="jSf6Z2BR2"> insert</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDPoint</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> key</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> V</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> val</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> KDNode</span><span class="jSfPXQEc2">::</span><span class="jSf6Z2BR2">ins</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">key</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> val</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> m_root</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}

</span><span class="jSf6Z2BR2">    </span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> </span><span class="jSfTvV9Y2">std</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">pair</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">V</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">double</span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> nearest</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDPoint</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> key</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSf4ooiC1">const
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        KDRect hr</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        hr</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">MakeInfinite</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">;

</span><span class="jSf6Z2BR2">        </span><span class="jSf4ooiC1">typename</span><span class="jSf6Z2BR2"> KDNode</span><span class="jSfPXQEc2">::</span><span class="jSf6Z2BR2">Nearest nn</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        nn</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">kd       </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        nn</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">dist_sqd </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1e99</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        KDNode</span><span class="jSfPXQEc2">::</span><span class="jSf6Z2BR2">nnbr</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">m_root</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> key</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> hr</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> nn</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(!</span><span class="jSf6Z2BR2">nn</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">kd</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfTvV9Y2">std</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">pair</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">V</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">double</span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> V</span><span class="jSfVQfQP2">()</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">1e99</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfTvV9Y2">std</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">pair</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">V</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">double</span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> nn</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">kd</span><span class="jSfVQfQP2">-&gt;</span><span class="jSf6Z2BR2">v</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> nn</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">dist_sqd</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}
</span><span class="jSfWtbTI">public</span><span class="jSfVQfQP2">:
</span><span class="jSf6Z2BR2">    KDTree</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">operator</span><span class="jSfLoabn2">=</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDTree</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">this </span><span class="jSfVQfQP2">!=</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">            </span><span class="jSfWtbTI">if</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">m_root</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">delete</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">m_root</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            m_root </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">m_root </span><span class="jSfVQfQP2">?</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">new</span><span class="jSf6Z2BR2"> KDNode</span><span class="jSfVQfQP2">(*</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">m_root</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">            m_count </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">m_count</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">        </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">        </span><span class="jSfWtbTI">return</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">*</span><span class="jSf6Z2BR2">this</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">    </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">    KDTree</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">const</span><span class="jSf6Z2BR2"> KDTree</span><span class="jSfVQfQP2">&amp;</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">        </span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> m_root</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">m_root </span><span class="jSfVQfQP2">?</span><span class="jSf6Z2BR2"> </span><span class="jSfWtbTI">new</span><span class="jSf6Z2BR2"> KDNode</span><span class="jSfVQfQP2">(*</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">m_root</span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">:</span><span class="jSf6Z2BR2"> </span><span class="jSfA8tmj1">0</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,
</span><span class="jSf6Z2BR2">          m_count</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> b</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">m_count </span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">{</span><span class="jSf6Z2BR2"> </span><span class="jSfqHLeV2">}
};</span></pre>
It can be initialized and used like below (in this example, used with CIE76, i.e. euclidean distance in CIE L*a*b* space):
<p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSf6Z2BR2">  KDTree</span><span class="jSfVQfQP2">&lt;</span><span class="jSf4ooiC1">unsigned</span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> tree</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">  </span><span class="jSfTJArG3">// Initialize tree:
</span><span class="jSf6Z2BR2">  </span><span class="jSfWtbTI">for</span><span class="jSfVQfQP2">(</span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> index</span><span class="jSfLoabn2">=</span><span class="jSfA8tmj1">0</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> index</span><span class="jSfVQfQP2">&lt;</span><span class="jSf6Z2BR2">PaletteSize</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">++</span><span class="jSf6Z2BR2">index</span><span class="jSfVQfQP2">)
</span><span class="jSf6Z2BR2">  </span><span class="jSfqHLeV2">{
</span><span class="jSf6Z2BR2">    LabItem lab </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> palette</span><span class="jSfqHLeV2">[</span><span class="jSf6Z2BR2">index</span><span class="jSfqHLeV2">];
</span><span class="jSf6Z2BR2">    tree</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">ins</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> KDTree</span><span class="jSfVQfQP2">&lt;</span><span class="jSf4ooiC1">unsigned</span><span class="jSfVQfQP2">&gt;</span><span class="jSfPXQEc2">::</span><span class="jSf6Z2BR2">KDPoint</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> lab</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">L</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> lab</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">a</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> lab</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">b</span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> index </span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">  </span><span class="jSfqHLeV2">}
</span><span class="jSf6Z2BR2">  </span><span class="jSfVQfQP2">...
</span><span class="jSf6Z2BR2">  </span><span class="jSfTJArG3">// Example for searching the tree for nearest match for particular input:
</span><span class="jSf6Z2BR2">  </span><span class="jSfTvV9Y2">std</span><span class="jSfPXQEc2">::</span><span class="jSfTvV9Y2">pair</span><span class="jSfVQfQP2">&lt;</span><span class="jSf4ooiC1">unsigned</span><span class="jSfqHLeV2">,</span><span class="jSf4ooiC1">double</span><span class="jSfVQfQP2">&gt;</span><span class="jSf6Z2BR2"> result </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> tree</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">nearest</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2">  KDPoint</span><span class="jSfVQfQP2">(</span><span class="jSf6Z2BR2"> input</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">L</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> input</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">a</span><span class="jSfqHLeV2">,</span><span class="jSf6Z2BR2"> input</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">b </span><span class="jSfVQfQP2">)</span><span class="jSf6Z2BR2"> </span><span class="jSfVQfQP2">)</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">  </span><span class="jSf4ooiC1">unsigned</span><span class="jSf6Z2BR2"> nearest_paletteindex </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">first</span><span class="jSfqHLeV2">;
</span><span class="jSf6Z2BR2">  </span><span class="jSf4ooiC1">double</span><span class="jSf6Z2BR2">   match_penalty        </span><span class="jSfLoabn2">=</span><span class="jSf6Z2BR2"> result</span><span class="jSfVQfQP2">.</span><span class="jSf6Z2BR2">second</span><span class="jSfqHLeV2">;</span><span class="jSf6Z2BR2"> </span><span class="jSfTJArG3">// euclidean distance squared.</span></pre>
This code puts only palette values into the tree, but you
can also put there pre-mixed color combinations, etc.
<p>It does not make much difference to the speed whether you
search 16 palette items linearly or with a kd-tree, but it
does make a fantastic difference whether you search 2882880
combinations linearly or by using a kd-tree.
</p></div></div><h2><a name="Appendix 4PngCompression"></a>Appendix 4: PNG compression</h2><div class="deeper">
I have used this script to compress all PNG images on this webpage.
It utilizes <a class="extlink" id="i30B9C53F" href="http://web.archive.org/web/20171024201240/http://advancemame.sourceforge.net/doc-advpng.html">AdvPNG</a>,
<a class="extlink" id="i18D57D0A" href="http://web.archive.org/web/20171024201240/http://optipng.sourceforge.net/">OptiPNG</a>,
<a class="extlink" id="iC46161C1" href="http://web.archive.org/web/20171024201240/http://www.walbeehm.com/download/">DeflOpt</a> (run under Wine)
and <a class="extlink" id="iFF1397CC" href="http://web.archive.org/web/20171024201240/http://www.advsys.net/ken/utils.htm">PNGOUT</a>.
<p></p><pre class="source_snippet" style="background-color:#FFF;color:#000"><span class="jSfWtbTI">in=</span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$1</span><span class="jSfpLmX01">"
</span><span class="jSf6Z2BR2">tmp=</span><span class="jSfpLmX01">"compress.sh-tmp-"</span><span class="jSf-sSI-1">$$</span><span class="jSfpLmX01">".png"
</span><span class="jSf6Z2BR2">fin=</span><span class="jSfpLmX01">"_</span><span class="jSf-sSI-1">$1</span><span class="jSfpLmX01">"

</span><span class="jSf6Z2BR2">rm -f </span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$fin</span><span class="jSfpLmX01">"
</span><span class="jSf6Z2BR2">bsize=</span><span class="jSfpLmX01">"`stat -c %s </span><span class="jSf-sSI-1">$in</span><span class="jSfpLmX01">`"
</span><span class="jSf6Z2BR2">sizes=</span><span class="jSfpLmX01">"-n1 -n2 -n3 -n4 -n5 -n6 -n7 -n8 -n9 -n10 -n11 -n12 -n13"
</span><span class="jSf6Z2BR2">filters=</span><span class="jSfpLmX01">"0 1 2 3 4 5"
</span><span class="jSf6Z2BR2">advpng -z -4 </span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$in</span><span class="jSfpLmX01">"
</span><span class="jSf6Z2BR2">optipng -o7 </span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$in</span><span class="jSfpLmX01">"</span><span class="jSf6Z2BR2"> 
wine /usr/</span><span class="jSfWtbTI">local/</span><span class="jSf6Z2BR2">bin/DeflOpt.exe </span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$in</span><span class="jSfpLmX01">"

</span><span class="jSfWtbTI">for </span><span class="jSf6Z2BR2">filter </span><span class="jSfWtbTI">in </span><span class="jSf-sSI-1">$filters</span><span class="jSf6Z2BR2">;</span><span class="jSfWtbTI">do
</span><span class="jSf6Z2BR2">  </span><span class="jSfWtbTI">for </span><span class="jSf6Z2BR2">bufsize </span><span class="jSfWtbTI">in </span><span class="jSf-sSI-1">$sizes</span><span class="jSf6Z2BR2">;</span><span class="jSfWtbTI">do
</span><span class="jSf6Z2BR2">    rm -f </span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$tmp</span><span class="jSfpLmX01">"
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">while [ </span><span class="jSf-sSI-1">$(</span><span class="jSfWtbTI">jobs </span><span class="jSf6Z2BR2">-p|wc -l) -ge 4 ]; </span><span class="jSfWtbTI">do </span><span class="jSf6Z2BR2">sleep 0.2; </span><span class="jSfWtbTI">done
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">if </span><span class="jSf6Z2BR2">true; </span><span class="jSfWtbTI">then
</span><span class="jSf6Z2BR2">      f=</span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$tmp</span><span class="jSfpLmX01">"</span><span class="jSf6Z2BR2">.</span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$BASHPID</span><span class="jSfpLmX01">"</span><span class="jSf6Z2BR2">.png
      pngout -v -f</span><span class="jSf-sSI-1">$filter</span><span class="jSf6Z2BR2"> </span><span class="jSf-sSI-1">$bufsize</span><span class="jSf6Z2BR2"> </span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$in</span><span class="jSfpLmX01">"</span><span class="jSf6Z2BR2"> </span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$f</span><span class="jSfpLmX01">"
</span><span class="jSf6Z2BR2">      flock -s 333
      size=</span><span class="jSfpLmX01">"`stat -c %s "</span><span class="jSf-sSI-1">$f</span><span class="jSfpLmX01">"`"
</span><span class="jSf6Z2BR2">      </span><span class="jSfWtbTI">if [ </span><span class="jSf-sSI-1">$bsize</span><span class="jSf6Z2BR2"> -gt </span><span class="jSf-sSI-1">$size</span><span class="jSf6Z2BR2"> ]; </span><span class="jSfWtbTI">then
</span><span class="jSf6Z2BR2">        wine /usr/</span><span class="jSfWtbTI">local/</span><span class="jSf6Z2BR2">bin/DeflOpt.exe </span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$f</span><span class="jSfpLmX01">"
</span><span class="jSf6Z2BR2">        mv -f </span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$f</span><span class="jSfpLmX01">"</span><span class="jSf6Z2BR2"> </span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$fin</span><span class="jSfpLmX01">"
</span><span class="jSf6Z2BR2">        bsize=</span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$size</span><span class="jSfpLmX01">"
</span><span class="jSf6Z2BR2">      </span><span class="jSfWtbTI">else
</span><span class="jSf6Z2BR2">        rm -f </span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$f</span><span class="jSfpLmX01">"
</span><span class="jSf6Z2BR2">      </span><span class="jSfWtbTI">fi
</span><span class="jSf6Z2BR2">    </span><span class="jSfWtbTI">fi </span><span class="jSf6Z2BR2">&amp;
  </span><span class="jSfWtbTI">done </span><span class="jSf6Z2BR2"> 
</span><span class="jSfWtbTI">done </span><span class="jSf6Z2BR2">333&lt; </span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$in</span><span class="jSfpLmX01">"
</span><span class="jSfWtbTI">wait
</span><span class="jSf6Z2BR2">mv -f </span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$fin</span><span class="jSfpLmX01">"</span><span class="jSf6Z2BR2"> </span><span class="jSfpLmX01">"</span><span class="jSf-sSI-1">$in</span><span class="jSfpLmX01">"</span></pre>
</div><h2><a name="Authors"></a>Authors</h2><div class="deeper">
<ul><li> Joel Yliluoma 2011-01-24, <a class="extlink" id="i1EE48DDA" href="http://web.archive.org/web/20171024201240/http://iki.fi/bisqwit/">http://iki.fi/bisqwit/</a>
</li></ul></div><h2><a name="Literature"></a>Literature</h2><div class="deeper">
<ul><li> "Ordered Dithering, Stephen Hawley, Graphics Gems, Academic Press, 1990"
</li><li> Alejo Hausner, "Hierarchical Graph Color Dither", Durham, NH, USA, 2008
</li><li> Stephen J. Sangwine &amp; Robin E. N. Horne, "The colour image processing handbook", ISBN 0412806207
</li><li> <a class="extlink" id="i85D6A724" href="http://web.archive.org/web/20171024201240/http://www.argyllcms.com/index.html">Argyll CMS</a>
</li><li> Imagemagick
</li><li> Wikipedia article <a class="extlink" id="iE8768EB0" href="http://web.archive.org/web/20171024201240/http://en.wikipedia.org/wiki/Color_difference">Color difference</a>
</li><li> Wikipedia article <a class="extlink" id="i831AF971" href="http://web.archive.org/web/20171024201240/http://en.wikipedia.org/wiki/Dithering">Dithering</a>
</li><li> Wikipedia article <a class="extlink" id="i756C7BCD" href="http://web.archive.org/web/20171024201240/http://en.wikipedia.org/wiki/kd-tree">kd-tree</a>
</li><li> Pattern Dithering, Thomas Knoll, Ann Arbor, MI (US), US patent n.o. 6606166
</li></ul><p>¹) Do not take this statement as legal guidance.
All code on this page is provided as-is, without warranty.
<tt>#include&nbsp;&lt;GPL/warranty.txt&gt;</tt>.
</p></div></div><hr>
<div class="lastedit">
Last edited at: 2014-07-02T13:20:03+03:00</div>
 


</body></html>
<!--
     FILE ARCHIVED ON 20:12:40 Oct 24, 2017 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 09:08:55 Dec 20, 2018.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  LoadShardBlock: 74.368 (3)
  esindex: 0.009
  captures_list: 93.548
  CDXLines.iter: 13.742 (3)
  PetaboxLoader3.datanode: 71.653 (4)
  exclusion.robots: 0.39
  exclusion.robots.policy: 0.375
  RedisCDXSource: 0.644
  PetaboxLoader3.resolve: 22.088
  load_resource: 36.819
-->